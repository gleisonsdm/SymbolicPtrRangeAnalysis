*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !11, metadata !44), !dbg !45
  store i32** %b, i32*** %b.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !12, metadata !44), !dbg !46
  store i32 %n, i32* %n.addr, align 4, !tbaa !47
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13, metadata !44), !dbg !49
  %0 = bitcast i32* %i to i8*, !dbg !50
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !50
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14, metadata !44), !dbg !51
  store i32 0, i32* %i, align 4, !dbg !51, !tbaa !47
  br label %for.cond, !dbg !50

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load i32, i32* %i, align 4, !dbg !52, !tbaa !47
  %2 = load i32, i32* %n.addr, align 4, !dbg !53, !tbaa !47
  %cmp = icmp slt i32 %1, %2, !dbg !54
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !56
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !56
  br label %for.end.17

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !57
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !57
  call void @llvm.dbg.declare(metadata i32* %j, metadata !16, metadata !44), !dbg !58
  store i32 0, i32* %j, align 4, !dbg !58, !tbaa !47
  br label %for.cond.1, !dbg !57

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !59, !tbaa !47
  %6 = load i32, i32* %n.addr, align 4, !dbg !61, !tbaa !47
  %cmp2 = icmp slt i32 %5, %6, !dbg !62
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !63

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !64
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !64
  br label %for.end

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !65, !tbaa !47
  %idxprom = sext i32 %8 to i64, !dbg !67
  %9 = load i32, i32* %i, align 4, !dbg !68, !tbaa !47
  %idxprom5 = sext i32 %9 to i64, !dbg !67
  %10 = load i32**, i32*** %b.addr, align 8, !dbg !67, !tbaa !40
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %idxprom5, !dbg !67
  %11 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !40
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !67
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !47
  %13 = load i32, i32* %j, align 4, !dbg !69, !tbaa !47
  %idxprom7 = sext i32 %13 to i64, !dbg !70
  %14 = load i32, i32* %i, align 4, !dbg !71, !tbaa !47
  %idxprom8 = sext i32 %14 to i64, !dbg !70
  %15 = load i32**, i32*** %a.addr, align 8, !dbg !70, !tbaa !40
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !70
  %16 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !40
  %arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !70
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !47
  %add = add nsw i32 %12, %17, !dbg !72
  %18 = load i32, i32* %j, align 4, !dbg !73, !tbaa !47
  %idxprom11 = sext i32 %18 to i64, !dbg !74
  %19 = load i32, i32* %i, align 4, !dbg !75, !tbaa !47
  %idxprom12 = sext i32 %19 to i64, !dbg !74
  %20 = load i32**, i32*** %a.addr, align 8, !dbg !74, !tbaa !40
  %arrayidx13 = getelementptr inbounds i32*, i32** %20, i64 %idxprom12, !dbg !74
  %21 = load i32*, i32** %arrayidx13, align 8, !dbg !74, !tbaa !40
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom11, !dbg !74
  store i32 %add, i32* %arrayidx14, align 4, !dbg !76, !tbaa !47
  br label %for.inc, !dbg !77

for.inc:                                          ; preds = %for.body.4
  %22 = load i32, i32* %j, align 4, !dbg !78, !tbaa !47
  %inc = add nsw i32 %22, 1, !dbg !78
  store i32 %inc, i32* %j, align 4, !dbg !78, !tbaa !47
  br label %for.cond.1, !dbg !64

for.end:                                          ; preds = %for.cond.cleanup.3
  br label %for.inc.15, !dbg !79

for.inc.15:                                       ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !80, !tbaa !47
  %inc16 = add nsw i32 %23, 1, !dbg !80
  store i32 %inc16, i32* %i, align 4, !dbg !80, !tbaa !47
  br label %for.cond, !dbg !56

for.end.17:                                       ; preds = %for.cond.cleanup
  ret void, !dbg !81
}
*** IR Dump Before Add DWARF path discriminators ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !11, metadata !44), !dbg !45
  store i32** %b, i32*** %b.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !12, metadata !44), !dbg !46
  store i32 %n, i32* %n.addr, align 4, !tbaa !47
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13, metadata !44), !dbg !49
  %0 = bitcast i32* %i to i8*, !dbg !50
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !50
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14, metadata !44), !dbg !51
  store i32 0, i32* %i, align 4, !dbg !51, !tbaa !47
  br label %for.cond, !dbg !50

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load i32, i32* %i, align 4, !dbg !52, !tbaa !47
  %2 = load i32, i32* %n.addr, align 4, !dbg !53, !tbaa !47
  %cmp = icmp slt i32 %1, %2, !dbg !54
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !56
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !56
  br label %for.end.17

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !57
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !57
  call void @llvm.dbg.declare(metadata i32* %j, metadata !16, metadata !44), !dbg !58
  store i32 0, i32* %j, align 4, !dbg !58, !tbaa !47
  br label %for.cond.1, !dbg !57

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !59, !tbaa !47
  %6 = load i32, i32* %n.addr, align 4, !dbg !61, !tbaa !47
  %cmp2 = icmp slt i32 %5, %6, !dbg !62
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !63

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !64
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !64
  br label %for.end

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !65, !tbaa !47
  %idxprom = sext i32 %8 to i64, !dbg !67
  %9 = load i32, i32* %i, align 4, !dbg !68, !tbaa !47
  %idxprom5 = sext i32 %9 to i64, !dbg !67
  %10 = load i32**, i32*** %b.addr, align 8, !dbg !67, !tbaa !40
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %idxprom5, !dbg !67
  %11 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !40
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !67
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !47
  %13 = load i32, i32* %j, align 4, !dbg !69, !tbaa !47
  %idxprom7 = sext i32 %13 to i64, !dbg !70
  %14 = load i32, i32* %i, align 4, !dbg !71, !tbaa !47
  %idxprom8 = sext i32 %14 to i64, !dbg !70
  %15 = load i32**, i32*** %a.addr, align 8, !dbg !70, !tbaa !40
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !70
  %16 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !40
  %arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !70
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !47
  %add = add nsw i32 %12, %17, !dbg !72
  %18 = load i32, i32* %j, align 4, !dbg !73, !tbaa !47
  %idxprom11 = sext i32 %18 to i64, !dbg !74
  %19 = load i32, i32* %i, align 4, !dbg !75, !tbaa !47
  %idxprom12 = sext i32 %19 to i64, !dbg !74
  %20 = load i32**, i32*** %a.addr, align 8, !dbg !74, !tbaa !40
  %arrayidx13 = getelementptr inbounds i32*, i32** %20, i64 %idxprom12, !dbg !74
  %21 = load i32*, i32** %arrayidx13, align 8, !dbg !74, !tbaa !40
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom11, !dbg !74
  store i32 %add, i32* %arrayidx14, align 4, !dbg !76, !tbaa !47
  br label %for.inc, !dbg !77

for.inc:                                          ; preds = %for.body.4
  %22 = load i32, i32* %j, align 4, !dbg !78, !tbaa !47
  %inc = add nsw i32 %22, 1, !dbg !78
  store i32 %inc, i32* %j, align 4, !dbg !78, !tbaa !47
  br label %for.cond.1, !dbg !64

for.end:                                          ; preds = %for.cond.cleanup.3
  br label %for.inc.15, !dbg !79

for.inc.15:                                       ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !80, !tbaa !47
  %inc16 = add nsw i32 %23, 1, !dbg !80
  store i32 %inc16, i32* %i, align 4, !dbg !80, !tbaa !47
  br label %for.cond, !dbg !56

for.end.17:                                       ; preds = %for.cond.cleanup
  ret void, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !11, metadata !44), !dbg !45
  store i32** %b, i32*** %b.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !12, metadata !44), !dbg !46
  store i32 %n, i32* %n.addr, align 4, !tbaa !47
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13, metadata !44), !dbg !49
  %0 = bitcast i32* %i to i8*, !dbg !50
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !50
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14, metadata !44), !dbg !51
  store i32 0, i32* %i, align 4, !dbg !51, !tbaa !47
  br label %for.cond, !dbg !50

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load i32, i32* %i, align 4, !dbg !52, !tbaa !47
  %2 = load i32, i32* %n.addr, align 4, !dbg !55, !tbaa !47
  %cmp = icmp slt i32 %1, %2, !dbg !56
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !57

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !58
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !58
  br label %for.end.17

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !59
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !59
  call void @llvm.dbg.declare(metadata i32* %j, metadata !16, metadata !44), !dbg !60
  store i32 0, i32* %j, align 4, !dbg !60, !tbaa !47
  br label %for.cond.1, !dbg !59

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !61, !tbaa !47
  %6 = load i32, i32* %n.addr, align 4, !dbg !65, !tbaa !47
  %cmp2 = icmp slt i32 %5, %6, !dbg !66
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !67

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !68
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !68
  br label %for.end

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !69, !tbaa !47
  %idxprom = sext i32 %8 to i64, !dbg !71
  %9 = load i32, i32* %i, align 4, !dbg !72, !tbaa !47
  %idxprom5 = sext i32 %9 to i64, !dbg !71
  %10 = load i32**, i32*** %b.addr, align 8, !dbg !71, !tbaa !40
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %idxprom5, !dbg !71
  %11 = load i32*, i32** %arrayidx, align 8, !dbg !71, !tbaa !40
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !71
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !71, !tbaa !47
  %13 = load i32, i32* %j, align 4, !dbg !73, !tbaa !47
  %idxprom7 = sext i32 %13 to i64, !dbg !74
  %14 = load i32, i32* %i, align 4, !dbg !75, !tbaa !47
  %idxprom8 = sext i32 %14 to i64, !dbg !74
  %15 = load i32**, i32*** %a.addr, align 8, !dbg !74, !tbaa !40
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !74
  %16 = load i32*, i32** %arrayidx9, align 8, !dbg !74, !tbaa !40
  %arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !74
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !74, !tbaa !47
  %add = add nsw i32 %12, %17, !dbg !76
  %18 = load i32, i32* %j, align 4, !dbg !77, !tbaa !47
  %idxprom11 = sext i32 %18 to i64, !dbg !78
  %19 = load i32, i32* %i, align 4, !dbg !79, !tbaa !47
  %idxprom12 = sext i32 %19 to i64, !dbg !78
  %20 = load i32**, i32*** %a.addr, align 8, !dbg !78, !tbaa !40
  %arrayidx13 = getelementptr inbounds i32*, i32** %20, i64 %idxprom12, !dbg !78
  %21 = load i32*, i32** %arrayidx13, align 8, !dbg !78, !tbaa !40
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom11, !dbg !78
  store i32 %add, i32* %arrayidx14, align 4, !dbg !80, !tbaa !47
  br label %for.inc, !dbg !81

for.inc:                                          ; preds = %for.body.4
  %22 = load i32, i32* %j, align 4, !dbg !82, !tbaa !47
  %inc = add nsw i32 %22, 1, !dbg !82
  store i32 %inc, i32* %j, align 4, !dbg !82, !tbaa !47
  br label %for.cond.1, !dbg !68

for.end:                                          ; preds = %for.cond.cleanup.3
  br label %for.inc.15, !dbg !83

for.inc.15:                                       ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !84, !tbaa !47
  %inc16 = add nsw i32 %23, 1, !dbg !84
  store i32 %inc16, i32* %i, align 4, !dbg !84, !tbaa !47
  br label %for.cond, !dbg !58

for.end.17:                                       ; preds = %for.cond.cleanup
  ret void, !dbg !85
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !11, metadata !44), !dbg !45
  store i32** %b, i32*** %b.addr, align 8, !tbaa !40
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !12, metadata !44), !dbg !46
  store i32 %n, i32* %n.addr, align 4, !tbaa !47
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !13, metadata !44), !dbg !49
  %0 = bitcast i32* %i to i8*, !dbg !50
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !50
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14, metadata !44), !dbg !51
  store i32 0, i32* %i, align 4, !dbg !51, !tbaa !47
  br label %for.cond, !dbg !50

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %1 = load i32, i32* %i, align 4, !dbg !52, !tbaa !47
  %2 = load i32, i32* %n.addr, align 4, !dbg !55, !tbaa !47
  %cmp = icmp slt i32 %1, %2, !dbg !56
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !57

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !58
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !58
  ret void, !dbg !59

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !60
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !60
  call void @llvm.dbg.declare(metadata i32* %j, metadata !16, metadata !44), !dbg !61
  store i32 0, i32* %j, align 4, !dbg !61, !tbaa !47
  br label %for.cond.1, !dbg !60

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !62, !tbaa !47
  %6 = load i32, i32* %n.addr, align 4, !dbg !66, !tbaa !47
  %cmp2 = icmp slt i32 %5, %6, !dbg !67
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !68

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !69
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !69
  %8 = load i32, i32* %i, align 4, !dbg !70, !tbaa !47
  %inc16 = add nsw i32 %8, 1, !dbg !70
  store i32 %inc16, i32* %i, align 4, !dbg !70, !tbaa !47
  br label %for.cond, !dbg !58

for.body.4:                                       ; preds = %for.cond.1
  %9 = load i32, i32* %j, align 4, !dbg !71, !tbaa !47
  %idxprom = sext i32 %9 to i64, !dbg !73
  %10 = load i32, i32* %i, align 4, !dbg !74, !tbaa !47
  %idxprom5 = sext i32 %10 to i64, !dbg !73
  %11 = load i32**, i32*** %b.addr, align 8, !dbg !73, !tbaa !40
  %arrayidx = getelementptr inbounds i32*, i32** %11, i64 %idxprom5, !dbg !73
  %12 = load i32*, i32** %arrayidx, align 8, !dbg !73, !tbaa !40
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i64 %idxprom, !dbg !73
  %13 = load i32, i32* %arrayidx6, align 4, !dbg !73, !tbaa !47
  %14 = load i32, i32* %j, align 4, !dbg !75, !tbaa !47
  %idxprom7 = sext i32 %14 to i64, !dbg !76
  %15 = load i32, i32* %i, align 4, !dbg !77, !tbaa !47
  %idxprom8 = sext i32 %15 to i64, !dbg !76
  %16 = load i32**, i32*** %a.addr, align 8, !dbg !76, !tbaa !40
  %arrayidx9 = getelementptr inbounds i32*, i32** %16, i64 %idxprom8, !dbg !76
  %17 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !40
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %idxprom7, !dbg !76
  %18 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !47
  %add = add nsw i32 %13, %18, !dbg !78
  %19 = load i32, i32* %j, align 4, !dbg !79, !tbaa !47
  %idxprom11 = sext i32 %19 to i64, !dbg !80
  %20 = load i32, i32* %i, align 4, !dbg !81, !tbaa !47
  %idxprom12 = sext i32 %20 to i64, !dbg !80
  %21 = load i32**, i32*** %a.addr, align 8, !dbg !80, !tbaa !40
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i64 %idxprom12, !dbg !80
  %22 = load i32*, i32** %arrayidx13, align 8, !dbg !80, !tbaa !40
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %idxprom11, !dbg !80
  store i32 %add, i32* %arrayidx14, align 4, !dbg !82, !tbaa !47
  %23 = load i32, i32* %j, align 4, !dbg !83, !tbaa !47
  %inc = add nsw i32 %23, 1, !dbg !83
  store i32 %inc, i32* %j, align 4, !dbg !83, !tbaa !47
  br label %for.cond.1, !dbg !69
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %idxprom7 = sext i32 %j.0 to i64, !dbg !64
  %idxprom8 = sext i32 %i.0 to i64, !dbg !64
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom8, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom7, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  %idxprom11 = sext i32 %j.0 to i64, !dbg !66
  %idxprom12 = sext i32 %i.0 to i64, !dbg !66
  %arrayidx13 = getelementptr inbounds i32*, i32** %a, i64 %idxprom12, !dbg !66
  %4 = load i32*, i32** %arrayidx13, align 8, !dbg !66, !tbaa !58
  %arrayidx14 = getelementptr inbounds i32, i32* %4, i64 %idxprom11, !dbg !66
  store i32 %add, i32* %arrayidx14, align 4, !dbg !67, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !68
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !69
}
*** IR Dump Before Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  store i32 %add, i32* %arrayidx10, align 4, !dbg !66, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !67
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !68
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !22, metadata !40), !dbg !69
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !23, metadata !40), !dbg !70
  store i32 %n, i32* %n.addr, align 4, !tbaa !62
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !24, metadata !40), !dbg !71
  %0 = bitcast i32* %i to i8*, !dbg !72
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !72
  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !40), !dbg !73
  store i32 0, i32* %i, align 4, !dbg !73, !tbaa !62
  br label %for.cond, !dbg !72

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load i32, i32* %i, align 4, !dbg !74, !tbaa !62
  %2 = load i32, i32* %n.addr, align 4, !dbg !75, !tbaa !62
  %cmp = icmp slt i32 %1, %2, !dbg !76
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !77

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !78
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !78
  br label %for.end.17

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !79
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !79
  call void @llvm.dbg.declare(metadata i32* %j, metadata !27, metadata !40), !dbg !80
  store i32 0, i32* %j, align 4, !dbg !80, !tbaa !62
  br label %for.cond.1, !dbg !79

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !81, !tbaa !62
  %6 = load i32, i32* %n.addr, align 4, !dbg !83, !tbaa !62
  %cmp2 = icmp slt i32 %5, %6, !dbg !84
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !85

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !86
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !86
  br label %for.end

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !87, !tbaa !62
  %idxprom = sext i32 %8 to i64, !dbg !89
  %9 = load i32, i32* %i, align 4, !dbg !90, !tbaa !62
  %idxprom5 = sext i32 %9 to i64, !dbg !89
  %10 = load i32**, i32*** %b.addr, align 8, !dbg !89, !tbaa !58
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %idxprom5, !dbg !89
  %11 = load i32*, i32** %arrayidx, align 8, !dbg !89, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !89
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !89, !tbaa !62
  %13 = load i32, i32* %j, align 4, !dbg !91, !tbaa !62
  %idxprom7 = sext i32 %13 to i64, !dbg !92
  %14 = load i32, i32* %i, align 4, !dbg !93, !tbaa !62
  %idxprom8 = sext i32 %14 to i64, !dbg !92
  %15 = load i32**, i32*** %a.addr, align 8, !dbg !92, !tbaa !58
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !92
  %16 = load i32*, i32** %arrayidx9, align 8, !dbg !92, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !92
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !92, !tbaa !62
  %add = add nsw i32 %12, %17, !dbg !94
  %18 = load i32, i32* %j, align 4, !dbg !95, !tbaa !62
  %idxprom11 = sext i32 %18 to i64, !dbg !96
  %19 = load i32, i32* %i, align 4, !dbg !97, !tbaa !62
  %idxprom12 = sext i32 %19 to i64, !dbg !96
  %20 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %arrayidx13 = getelementptr inbounds i32*, i32** %20, i64 %idxprom12, !dbg !96
  %21 = load i32*, i32** %arrayidx13, align 8, !dbg !96, !tbaa !58
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom11, !dbg !96
  store i32 %add, i32* %arrayidx14, align 4, !dbg !98, !tbaa !62
  br label %for.inc, !dbg !99

for.inc:                                          ; preds = %for.body.4
  %22 = load i32, i32* %j, align 4, !dbg !100, !tbaa !62
  %inc = add nsw i32 %22, 1, !dbg !100
  store i32 %inc, i32* %j, align 4, !dbg !100, !tbaa !62
  br label %for.cond.1, !dbg !86

for.end:                                          ; preds = %for.cond.cleanup.3
  br label %for.inc.15, !dbg !101

for.inc.15:                                       ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !102, !tbaa !62
  %inc16 = add nsw i32 %23, 1, !dbg !102
  store i32 %inc16, i32* %i, align 4, !dbg !102, !tbaa !62
  br label %for.cond, !dbg !78

for.end.17:                                       ; preds = %for.cond.cleanup
  ret void, !dbg !103
}
*** IR Dump Before Add DWARF path discriminators ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !22, metadata !40), !dbg !69
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !23, metadata !40), !dbg !70
  store i32 %n, i32* %n.addr, align 4, !tbaa !62
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !24, metadata !40), !dbg !71
  %0 = bitcast i32* %i to i8*, !dbg !72
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !72
  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !40), !dbg !73
  store i32 0, i32* %i, align 4, !dbg !73, !tbaa !62
  br label %for.cond, !dbg !72

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load i32, i32* %i, align 4, !dbg !74, !tbaa !62
  %2 = load i32, i32* %n.addr, align 4, !dbg !75, !tbaa !62
  %cmp = icmp slt i32 %1, %2, !dbg !76
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !77

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !78
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !78
  br label %for.end.17

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !79
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !79
  call void @llvm.dbg.declare(metadata i32* %j, metadata !27, metadata !40), !dbg !80
  store i32 0, i32* %j, align 4, !dbg !80, !tbaa !62
  br label %for.cond.1, !dbg !79

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !81, !tbaa !62
  %6 = load i32, i32* %n.addr, align 4, !dbg !83, !tbaa !62
  %cmp2 = icmp slt i32 %5, %6, !dbg !84
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !85

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !86
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !86
  br label %for.end

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !87, !tbaa !62
  %idxprom = sext i32 %8 to i64, !dbg !89
  %9 = load i32, i32* %i, align 4, !dbg !90, !tbaa !62
  %idxprom5 = sext i32 %9 to i64, !dbg !89
  %10 = load i32**, i32*** %b.addr, align 8, !dbg !89, !tbaa !58
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %idxprom5, !dbg !89
  %11 = load i32*, i32** %arrayidx, align 8, !dbg !89, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !89
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !89, !tbaa !62
  %13 = load i32, i32* %j, align 4, !dbg !91, !tbaa !62
  %idxprom7 = sext i32 %13 to i64, !dbg !92
  %14 = load i32, i32* %i, align 4, !dbg !93, !tbaa !62
  %idxprom8 = sext i32 %14 to i64, !dbg !92
  %15 = load i32**, i32*** %a.addr, align 8, !dbg !92, !tbaa !58
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !92
  %16 = load i32*, i32** %arrayidx9, align 8, !dbg !92, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !92
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !92, !tbaa !62
  %add = add nsw i32 %12, %17, !dbg !94
  %18 = load i32, i32* %j, align 4, !dbg !95, !tbaa !62
  %idxprom11 = sext i32 %18 to i64, !dbg !96
  %19 = load i32, i32* %i, align 4, !dbg !97, !tbaa !62
  %idxprom12 = sext i32 %19 to i64, !dbg !96
  %20 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %arrayidx13 = getelementptr inbounds i32*, i32** %20, i64 %idxprom12, !dbg !96
  %21 = load i32*, i32** %arrayidx13, align 8, !dbg !96, !tbaa !58
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom11, !dbg !96
  store i32 %add, i32* %arrayidx14, align 4, !dbg !98, !tbaa !62
  br label %for.inc, !dbg !99

for.inc:                                          ; preds = %for.body.4
  %22 = load i32, i32* %j, align 4, !dbg !100, !tbaa !62
  %inc = add nsw i32 %22, 1, !dbg !100
  store i32 %inc, i32* %j, align 4, !dbg !100, !tbaa !62
  br label %for.cond.1, !dbg !86

for.end:                                          ; preds = %for.cond.cleanup.3
  br label %for.inc.15, !dbg !101

for.inc.15:                                       ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !102, !tbaa !62
  %inc16 = add nsw i32 %23, 1, !dbg !102
  store i32 %inc16, i32* %i, align 4, !dbg !102, !tbaa !62
  br label %for.cond, !dbg !78

for.end.17:                                       ; preds = %for.cond.cleanup
  ret void, !dbg !103
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !22, metadata !40), !dbg !69
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !23, metadata !40), !dbg !70
  store i32 %n, i32* %n.addr, align 4, !tbaa !62
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !24, metadata !40), !dbg !71
  %0 = bitcast i32* %i to i8*, !dbg !72
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !72
  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !40), !dbg !73
  store i32 0, i32* %i, align 4, !dbg !73, !tbaa !62
  br label %for.cond, !dbg !72

for.cond:                                         ; preds = %for.inc.15, %entry
  %1 = load i32, i32* %i, align 4, !dbg !74, !tbaa !62
  %2 = load i32, i32* %n.addr, align 4, !dbg !77, !tbaa !62
  %cmp = icmp slt i32 %1, %2, !dbg !78
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !79

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !80
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !80
  br label %for.end.17

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !81
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !81
  call void @llvm.dbg.declare(metadata i32* %j, metadata !27, metadata !40), !dbg !82
  store i32 0, i32* %j, align 4, !dbg !82, !tbaa !62
  br label %for.cond.1, !dbg !81

for.cond.1:                                       ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !83, !tbaa !62
  %6 = load i32, i32* %n.addr, align 4, !dbg !87, !tbaa !62
  %cmp2 = icmp slt i32 %5, %6, !dbg !88
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !89

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !90
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !90
  br label %for.end

for.body.4:                                       ; preds = %for.cond.1
  %8 = load i32, i32* %j, align 4, !dbg !91, !tbaa !62
  %idxprom = sext i32 %8 to i64, !dbg !93
  %9 = load i32, i32* %i, align 4, !dbg !94, !tbaa !62
  %idxprom5 = sext i32 %9 to i64, !dbg !93
  %10 = load i32**, i32*** %b.addr, align 8, !dbg !93, !tbaa !58
  %arrayidx = getelementptr inbounds i32*, i32** %10, i64 %idxprom5, !dbg !93
  %11 = load i32*, i32** %arrayidx, align 8, !dbg !93, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !93
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !93, !tbaa !62
  %13 = load i32, i32* %j, align 4, !dbg !95, !tbaa !62
  %idxprom7 = sext i32 %13 to i64, !dbg !96
  %14 = load i32, i32* %i, align 4, !dbg !97, !tbaa !62
  %idxprom8 = sext i32 %14 to i64, !dbg !96
  %15 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %arrayidx9 = getelementptr inbounds i32*, i32** %15, i64 %idxprom8, !dbg !96
  %16 = load i32*, i32** %arrayidx9, align 8, !dbg !96, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !96
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !96, !tbaa !62
  %add = add nsw i32 %12, %17, !dbg !98
  %18 = load i32, i32* %j, align 4, !dbg !99, !tbaa !62
  %idxprom11 = sext i32 %18 to i64, !dbg !100
  %19 = load i32, i32* %i, align 4, !dbg !101, !tbaa !62
  %idxprom12 = sext i32 %19 to i64, !dbg !100
  %20 = load i32**, i32*** %a.addr, align 8, !dbg !100, !tbaa !58
  %arrayidx13 = getelementptr inbounds i32*, i32** %20, i64 %idxprom12, !dbg !100
  %21 = load i32*, i32** %arrayidx13, align 8, !dbg !100, !tbaa !58
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom11, !dbg !100
  store i32 %add, i32* %arrayidx14, align 4, !dbg !102, !tbaa !62
  br label %for.inc, !dbg !103

for.inc:                                          ; preds = %for.body.4
  %22 = load i32, i32* %j, align 4, !dbg !104, !tbaa !62
  %inc = add nsw i32 %22, 1, !dbg !104
  store i32 %inc, i32* %j, align 4, !dbg !104, !tbaa !62
  br label %for.cond.1, !dbg !90

for.end:                                          ; preds = %for.cond.cleanup.3
  br label %for.inc.15, !dbg !105

for.inc.15:                                       ; preds = %for.end
  %23 = load i32, i32* %i, align 4, !dbg !106, !tbaa !62
  %inc16 = add nsw i32 %23, 1, !dbg !106
  store i32 %inc16, i32* %i, align 4, !dbg !106, !tbaa !62
  br label %for.cond, !dbg !80

for.end.17:                                       ; preds = %for.cond.cleanup
  ret void, !dbg !107
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !22, metadata !40), !dbg !69
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !23, metadata !40), !dbg !70
  store i32 %n, i32* %n.addr, align 4, !tbaa !62
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !24, metadata !40), !dbg !71
  %0 = bitcast i32* %i to i8*, !dbg !72
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !72
  call void @llvm.dbg.declare(metadata i32* %i, metadata !25, metadata !40), !dbg !73
  store i32 0, i32* %i, align 4, !dbg !73, !tbaa !62
  br label %for.cond, !dbg !72

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %1 = load i32, i32* %i, align 4, !dbg !74, !tbaa !62
  %2 = load i32, i32* %n.addr, align 4, !dbg !77, !tbaa !62
  %cmp = icmp slt i32 %1, %2, !dbg !78
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !79

for.cond.cleanup:                                 ; preds = %for.cond
  store i32 2, i32* %cleanup.dest.slot
  %3 = bitcast i32* %i to i8*, !dbg !80
  call void @llvm.lifetime.end(i64 4, i8* %3) #2, !dbg !80
  ret void, !dbg !81

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %j to i8*, !dbg !82
  call void @llvm.lifetime.start(i64 4, i8* %4) #2, !dbg !82
  call void @llvm.dbg.declare(metadata i32* %j, metadata !27, metadata !40), !dbg !83
  store i32 0, i32* %j, align 4, !dbg !83, !tbaa !62
  br label %for.cond.1, !dbg !82

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !84, !tbaa !62
  %6 = load i32, i32* %n.addr, align 4, !dbg !88, !tbaa !62
  %cmp2 = icmp slt i32 %5, %6, !dbg !89
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !90

for.cond.cleanup.3:                               ; preds = %for.cond.1
  store i32 5, i32* %cleanup.dest.slot
  %7 = bitcast i32* %j to i8*, !dbg !91
  call void @llvm.lifetime.end(i64 4, i8* %7) #2, !dbg !91
  %8 = load i32, i32* %i, align 4, !dbg !92, !tbaa !62
  %inc16 = add nsw i32 %8, 1, !dbg !92
  store i32 %inc16, i32* %i, align 4, !dbg !92, !tbaa !62
  br label %for.cond, !dbg !80

for.body.4:                                       ; preds = %for.cond.1
  %9 = load i32, i32* %j, align 4, !dbg !93, !tbaa !62
  %idxprom = sext i32 %9 to i64, !dbg !95
  %10 = load i32, i32* %i, align 4, !dbg !96, !tbaa !62
  %idxprom5 = sext i32 %10 to i64, !dbg !95
  %11 = load i32**, i32*** %b.addr, align 8, !dbg !95, !tbaa !58
  %arrayidx = getelementptr inbounds i32*, i32** %11, i64 %idxprom5, !dbg !95
  %12 = load i32*, i32** %arrayidx, align 8, !dbg !95, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %12, i64 %idxprom, !dbg !95
  %13 = load i32, i32* %arrayidx6, align 4, !dbg !95, !tbaa !62
  %14 = load i32, i32* %j, align 4, !dbg !97, !tbaa !62
  %idxprom7 = sext i32 %14 to i64, !dbg !98
  %15 = load i32, i32* %i, align 4, !dbg !99, !tbaa !62
  %idxprom8 = sext i32 %15 to i64, !dbg !98
  %16 = load i32**, i32*** %a.addr, align 8, !dbg !98, !tbaa !58
  %arrayidx9 = getelementptr inbounds i32*, i32** %16, i64 %idxprom8, !dbg !98
  %17 = load i32*, i32** %arrayidx9, align 8, !dbg !98, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %17, i64 %idxprom7, !dbg !98
  %18 = load i32, i32* %arrayidx10, align 4, !dbg !98, !tbaa !62
  %add = add nsw i32 %13, %18, !dbg !100
  %19 = load i32, i32* %j, align 4, !dbg !101, !tbaa !62
  %idxprom11 = sext i32 %19 to i64, !dbg !102
  %20 = load i32, i32* %i, align 4, !dbg !103, !tbaa !62
  %idxprom12 = sext i32 %20 to i64, !dbg !102
  %21 = load i32**, i32*** %a.addr, align 8, !dbg !102, !tbaa !58
  %arrayidx13 = getelementptr inbounds i32*, i32** %21, i64 %idxprom12, !dbg !102
  %22 = load i32*, i32** %arrayidx13, align 8, !dbg !102, !tbaa !58
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %idxprom11, !dbg !102
  store i32 %add, i32* %arrayidx14, align 4, !dbg !104, !tbaa !62
  %23 = load i32, i32* %j, align 4, !dbg !105, !tbaa !62
  %inc = add nsw i32 %23, 1, !dbg !105
  store i32 %inc, i32* %j, align 4, !dbg !105, !tbaa !62
  br label %for.cond.1, !dbg !91
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !74
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !75

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !76

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !78

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !79
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !81

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !83

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !84
  %idxprom5 = sext i32 %i.0 to i64, !dbg !84
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !84
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !84, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !84
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !84, !tbaa !62
  %idxprom7 = sext i32 %j.0 to i64, !dbg !86
  %idxprom8 = sext i32 %i.0 to i64, !dbg !86
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom8, !dbg !86
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !86, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom7, !dbg !86
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !86, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !87
  %idxprom11 = sext i32 %j.0 to i64, !dbg !88
  %idxprom12 = sext i32 %i.0 to i64, !dbg !88
  %arrayidx13 = getelementptr inbounds i32*, i32** %a, i64 %idxprom12, !dbg !88
  %4 = load i32*, i32** %arrayidx13, align 8, !dbg !88, !tbaa !58
  %arrayidx14 = getelementptr inbounds i32, i32* %4, i64 %idxprom11, !dbg !88
  store i32 %add, i32* %arrayidx14, align 4, !dbg !89, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !90
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !91
}
*** IR Dump Before Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !74
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !75

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !76

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !78

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !79
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !81

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !83

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !84
  %idxprom5 = sext i32 %i.0 to i64, !dbg !84
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !84
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !84, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !84
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !84, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !86
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !86, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !86
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !86, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !87
  store i32 %add, i32* %arrayidx10, align 4, !dbg !88, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !89
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !90
}
*** IR Dump Before Module Verifier ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !35, metadata !40), !dbg !91
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !36, metadata !40), !dbg !92
  %0 = load i32**, i32*** %a.addr, align 8, !dbg !93, !tbaa !58
  %1 = load i32**, i32*** %b.addr, align 8, !dbg !94, !tbaa !58
  call void @foo(i32** %0, i32** %1, i32 100), !dbg !95
  %2 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %3 = load i32**, i32*** %a.addr, align 8, !dbg !97, !tbaa !58
  %add.ptr = getelementptr inbounds i32*, i32** %3, i64 50, !dbg !98
  call void @foo(i32** %2, i32** %add.ptr, i32 100), !dbg !99
  %4 = load i32**, i32*** %a.addr, align 8, !dbg !100, !tbaa !58
  %5 = load i32**, i32*** %b.addr, align 8, !dbg !101, !tbaa !58
  call void @foo2(i32** %4, i32** %5, i32 100), !dbg !102
  ret void, !dbg !103
}
*** IR Dump Before Add DWARF path discriminators ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !35, metadata !40), !dbg !91
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !36, metadata !40), !dbg !92
  %0 = load i32**, i32*** %a.addr, align 8, !dbg !93, !tbaa !58
  %1 = load i32**, i32*** %b.addr, align 8, !dbg !94, !tbaa !58
  call void @foo(i32** %0, i32** %1, i32 100), !dbg !95
  %2 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %3 = load i32**, i32*** %a.addr, align 8, !dbg !97, !tbaa !58
  %add.ptr = getelementptr inbounds i32*, i32** %3, i64 50, !dbg !98
  call void @foo(i32** %2, i32** %add.ptr, i32 100), !dbg !99
  %4 = load i32**, i32*** %a.addr, align 8, !dbg !100, !tbaa !58
  %5 = load i32**, i32*** %b.addr, align 8, !dbg !101, !tbaa !58
  call void @foo2(i32** %4, i32** %5, i32 100), !dbg !102
  ret void, !dbg !103
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !35, metadata !40), !dbg !91
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !36, metadata !40), !dbg !92
  %0 = load i32**, i32*** %a.addr, align 8, !dbg !93, !tbaa !58
  %1 = load i32**, i32*** %b.addr, align 8, !dbg !94, !tbaa !58
  call void @foo(i32** %0, i32** %1, i32 100), !dbg !95
  %2 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %3 = load i32**, i32*** %a.addr, align 8, !dbg !97, !tbaa !58
  %add.ptr = getelementptr inbounds i32*, i32** %3, i64 50, !dbg !98
  call void @foo(i32** %2, i32** %add.ptr, i32 100), !dbg !99
  %4 = load i32**, i32*** %a.addr, align 8, !dbg !100, !tbaa !58
  %5 = load i32**, i32*** %b.addr, align 8, !dbg !101, !tbaa !58
  call void @foo2(i32** %4, i32** %5, i32 100), !dbg !102
  ret void, !dbg !103
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  store i32** %a, i32*** %a.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !35, metadata !40), !dbg !91
  store i32** %b, i32*** %b.addr, align 8, !tbaa !58
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !36, metadata !40), !dbg !92
  %0 = load i32**, i32*** %a.addr, align 8, !dbg !93, !tbaa !58
  %1 = load i32**, i32*** %b.addr, align 8, !dbg !94, !tbaa !58
  call void @foo(i32** %0, i32** %1, i32 100), !dbg !95
  %2 = load i32**, i32*** %a.addr, align 8, !dbg !96, !tbaa !58
  %3 = load i32**, i32*** %a.addr, align 8, !dbg !97, !tbaa !58
  %add.ptr = getelementptr inbounds i32*, i32** %3, i64 50, !dbg !98
  call void @foo(i32** %2, i32** %add.ptr, i32 100), !dbg !99
  %4 = load i32**, i32*** %a.addr, align 8, !dbg !100, !tbaa !58
  %5 = load i32**, i32*** %b.addr, align 8, !dbg !101, !tbaa !58
  call void @foo2(i32** %4, i32** %5, i32 100), !dbg !102
  ret void, !dbg !103
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !91
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !92
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !93
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !94
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !95
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !96
  ret void, !dbg !97
}
*** IR Dump Before Lower 'expect' Intrinsics ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !91
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !92
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !93
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !94
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !95
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !96
  ret void, !dbg !97
}
*** IR Dump Before Interprocedural Sparse Conditional Constant Propagation ***; ModuleID = '/home/gleison/Desktop/Projetos/Examples/test3.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  store i32 %add, i32* %arrayidx10, align 4, !dbg !66, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !67
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !68
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !74
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !75

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !76

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !78

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !79
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !81

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !83

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !84
  %idxprom5 = sext i32 %i.0 to i64, !dbg !84
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !84
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !84, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !84
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !84, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !86
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !86, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !86
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !86, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !87
  store i32 %add, i32* %arrayidx10, align 4, !dbg !88, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !89
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !90
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !91
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !92
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !93
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !94
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !95
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !96
  ret void, !dbg !97
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !20, !31}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo, variables: !10)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !{!11, !12, !13, !14, !16}
!11 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!13 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!14 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !15, file: !1, line: 5, type: !9)
!15 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!16 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !17, file: !1, line: 6, type: !9)
!17 = distinct !DILexicalBlock(scope: !18, file: !1, line: 6, column: 5)
!18 = distinct !DILexicalBlock(scope: !19, file: !1, line: 5, column: 31)
!19 = distinct !DILexicalBlock(scope: !15, file: !1, line: 5, column: 3)
!20 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo2, variables: !21)
!21 = !{!22, !23, !24, !25, !27}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !20, file: !1, line: 12, type: !7)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !20, file: !1, line: 12, type: !7)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !20, file: !1, line: 12, type: !9)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !1, line: 13, type: !9)
!26 = distinct !DILexicalBlock(scope: !20, file: !1, line: 13, column: 3)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !28, file: !1, line: 14, type: !9)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 14, column: 5)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 13, column: 31)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 13, column: 3)
!31 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !32, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**)* @call_foo, variables: !34)
!32 = !DISubroutineType(types: !33)
!33 = !{null, !7, !7}
!34 = !{!35, !36}
!35 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !31, file: !1, line: 20, type: !7)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !31, file: !1, line: 20, type: !7)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!40 = !DIExpression()
!41 = !DILocation(line: 4, column: 16, scope: !4)
!42 = !DILocation(line: 4, column: 25, scope: !4)
!43 = !DILocation(line: 4, column: 32, scope: !4)
!44 = !DILocation(line: 5, column: 12, scope: !15)
!45 = !DILocation(line: 5, column: 8, scope: !15)
!46 = !DILocation(line: 5, column: 21, scope: !19)
!47 = !DILocation(line: 5, column: 3, scope: !15)
!48 = !DILocation(line: 10, column: 1, scope: !4)
!49 = !DILocation(line: 6, column: 14, scope: !17)
!50 = !DILocation(line: 6, column: 10, scope: !17)
!51 = !DILocation(line: 6, column: 23, scope: !52)
!52 = distinct !DILexicalBlock(scope: !17, file: !1, line: 6, column: 5)
!53 = !DILocation(line: 6, column: 5, scope: !17)
!54 = !DILocation(line: 5, column: 27, scope: !19)
!55 = !DILocation(line: 5, column: 3, scope: !19)
!56 = !DILocation(line: 7, column: 17, scope: !57)
!57 = distinct !DILexicalBlock(scope: !52, file: !1, line: 6, column: 33)
!58 = !{!59, !59, i64 0}
!59 = !{!"any pointer", !60, i64 0}
!60 = !{!"omnipotent char", !61, i64 0}
!61 = !{!"Simple C/C++ TBAA"}
!62 = !{!63, !63, i64 0}
!63 = !{!"int", !60, i64 0}
!64 = !DILocation(line: 7, column: 27, scope: !57)
!65 = !DILocation(line: 7, column: 25, scope: !57)
!66 = !DILocation(line: 7, column: 15, scope: !57)
!67 = !DILocation(line: 6, column: 29, scope: !52)
!68 = !DILocation(line: 6, column: 5, scope: !52)
!69 = !DILocation(line: 12, column: 17, scope: !20)
!70 = !DILocation(line: 12, column: 26, scope: !20)
!71 = !DILocation(line: 12, column: 33, scope: !20)
!72 = !DILocation(line: 13, column: 12, scope: !26)
!73 = !DILocation(line: 13, column: 8, scope: !26)
!74 = !DILocation(line: 13, column: 21, scope: !30)
!75 = !DILocation(line: 13, column: 3, scope: !26)
!76 = !DILocation(line: 18, column: 1, scope: !20)
!77 = !DILocation(line: 14, column: 14, scope: !28)
!78 = !DILocation(line: 14, column: 10, scope: !28)
!79 = !DILocation(line: 14, column: 23, scope: !80)
!80 = distinct !DILexicalBlock(scope: !28, file: !1, line: 14, column: 5)
!81 = !DILocation(line: 14, column: 5, scope: !28)
!82 = !DILocation(line: 13, column: 27, scope: !30)
!83 = !DILocation(line: 13, column: 3, scope: !30)
!84 = !DILocation(line: 15, column: 17, scope: !85)
!85 = distinct !DILexicalBlock(scope: !80, file: !1, line: 14, column: 33)
!86 = !DILocation(line: 15, column: 27, scope: !85)
!87 = !DILocation(line: 15, column: 25, scope: !85)
!88 = !DILocation(line: 15, column: 15, scope: !85)
!89 = !DILocation(line: 14, column: 29, scope: !80)
!90 = !DILocation(line: 14, column: 5, scope: !80)
!91 = !DILocation(line: 20, column: 21, scope: !31)
!92 = !DILocation(line: 20, column: 30, scope: !31)
!93 = !DILocation(line: 21, column: 3, scope: !31)
!94 = !DILocation(line: 22, column: 12, scope: !31)
!95 = !DILocation(line: 22, column: 3, scope: !31)
!96 = !DILocation(line: 23, column: 3, scope: !31)
!97 = !DILocation(line: 24, column: 1, scope: !31)
*** IR Dump Before Global Variable Optimizer ***; ModuleID = '/home/gleison/Desktop/Projetos/Examples/test3.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  store i32 %add, i32* %arrayidx10, align 4, !dbg !66, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !67
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !68
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !74
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !75

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !76

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !78

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !79
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !81

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !83

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !84
  %idxprom5 = sext i32 %i.0 to i64, !dbg !84
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !84
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !84, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !84
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !84, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !86
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !86, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !86
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !86, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !87
  store i32 %add, i32* %arrayidx10, align 4, !dbg !88, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !89
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !90
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !91
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !92
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !93
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !94
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !95
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !96
  ret void, !dbg !97
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !20, !31}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo, variables: !10)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !{!11, !12, !13, !14, !16}
!11 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!13 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!14 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !15, file: !1, line: 5, type: !9)
!15 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!16 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !17, file: !1, line: 6, type: !9)
!17 = distinct !DILexicalBlock(scope: !18, file: !1, line: 6, column: 5)
!18 = distinct !DILexicalBlock(scope: !19, file: !1, line: 5, column: 31)
!19 = distinct !DILexicalBlock(scope: !15, file: !1, line: 5, column: 3)
!20 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo2, variables: !21)
!21 = !{!22, !23, !24, !25, !27}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !20, file: !1, line: 12, type: !7)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !20, file: !1, line: 12, type: !7)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !20, file: !1, line: 12, type: !9)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !1, line: 13, type: !9)
!26 = distinct !DILexicalBlock(scope: !20, file: !1, line: 13, column: 3)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !28, file: !1, line: 14, type: !9)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 14, column: 5)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 13, column: 31)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 13, column: 3)
!31 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !32, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**)* @call_foo, variables: !34)
!32 = !DISubroutineType(types: !33)
!33 = !{null, !7, !7}
!34 = !{!35, !36}
!35 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !31, file: !1, line: 20, type: !7)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !31, file: !1, line: 20, type: !7)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!40 = !DIExpression()
!41 = !DILocation(line: 4, column: 16, scope: !4)
!42 = !DILocation(line: 4, column: 25, scope: !4)
!43 = !DILocation(line: 4, column: 32, scope: !4)
!44 = !DILocation(line: 5, column: 12, scope: !15)
!45 = !DILocation(line: 5, column: 8, scope: !15)
!46 = !DILocation(line: 5, column: 21, scope: !19)
!47 = !DILocation(line: 5, column: 3, scope: !15)
!48 = !DILocation(line: 10, column: 1, scope: !4)
!49 = !DILocation(line: 6, column: 14, scope: !17)
!50 = !DILocation(line: 6, column: 10, scope: !17)
!51 = !DILocation(line: 6, column: 23, scope: !52)
!52 = distinct !DILexicalBlock(scope: !17, file: !1, line: 6, column: 5)
!53 = !DILocation(line: 6, column: 5, scope: !17)
!54 = !DILocation(line: 5, column: 27, scope: !19)
!55 = !DILocation(line: 5, column: 3, scope: !19)
!56 = !DILocation(line: 7, column: 17, scope: !57)
!57 = distinct !DILexicalBlock(scope: !52, file: !1, line: 6, column: 33)
!58 = !{!59, !59, i64 0}
!59 = !{!"any pointer", !60, i64 0}
!60 = !{!"omnipotent char", !61, i64 0}
!61 = !{!"Simple C/C++ TBAA"}
!62 = !{!63, !63, i64 0}
!63 = !{!"int", !60, i64 0}
!64 = !DILocation(line: 7, column: 27, scope: !57)
!65 = !DILocation(line: 7, column: 25, scope: !57)
!66 = !DILocation(line: 7, column: 15, scope: !57)
!67 = !DILocation(line: 6, column: 29, scope: !52)
!68 = !DILocation(line: 6, column: 5, scope: !52)
!69 = !DILocation(line: 12, column: 17, scope: !20)
!70 = !DILocation(line: 12, column: 26, scope: !20)
!71 = !DILocation(line: 12, column: 33, scope: !20)
!72 = !DILocation(line: 13, column: 12, scope: !26)
!73 = !DILocation(line: 13, column: 8, scope: !26)
!74 = !DILocation(line: 13, column: 21, scope: !30)
!75 = !DILocation(line: 13, column: 3, scope: !26)
!76 = !DILocation(line: 18, column: 1, scope: !20)
!77 = !DILocation(line: 14, column: 14, scope: !28)
!78 = !DILocation(line: 14, column: 10, scope: !28)
!79 = !DILocation(line: 14, column: 23, scope: !80)
!80 = distinct !DILexicalBlock(scope: !28, file: !1, line: 14, column: 5)
!81 = !DILocation(line: 14, column: 5, scope: !28)
!82 = !DILocation(line: 13, column: 27, scope: !30)
!83 = !DILocation(line: 13, column: 3, scope: !30)
!84 = !DILocation(line: 15, column: 17, scope: !85)
!85 = distinct !DILexicalBlock(scope: !80, file: !1, line: 14, column: 33)
!86 = !DILocation(line: 15, column: 27, scope: !85)
!87 = !DILocation(line: 15, column: 25, scope: !85)
!88 = !DILocation(line: 15, column: 15, scope: !85)
!89 = !DILocation(line: 14, column: 29, scope: !80)
!90 = !DILocation(line: 14, column: 5, scope: !80)
!91 = !DILocation(line: 20, column: 21, scope: !31)
!92 = !DILocation(line: 20, column: 30, scope: !31)
!93 = !DILocation(line: 21, column: 3, scope: !31)
!94 = !DILocation(line: 22, column: 12, scope: !31)
!95 = !DILocation(line: 22, column: 3, scope: !31)
!96 = !DILocation(line: 23, column: 3, scope: !31)
!97 = !DILocation(line: 24, column: 1, scope: !31)
*** IR Dump Before Dead Argument Elimination ***; ModuleID = '/home/gleison/Desktop/Projetos/Examples/test3.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  store i32 %add, i32* %arrayidx10, align 4, !dbg !66, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !67
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !68
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !71
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !73

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !74
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !75

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !76

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !78

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !79
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !81

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !72
  br label %for.cond, !dbg !83

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !84
  %idxprom5 = sext i32 %i.0 to i64, !dbg !84
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !84
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !84, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !84
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !84, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !86
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !86, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !86
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !86, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !87
  store i32 %add, i32* %arrayidx10, align 4, !dbg !88, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !89
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !77
  br label %for.cond.1, !dbg !90
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !91
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !92
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !93
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !94
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !95
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !96
  ret void, !dbg !97
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !20, !31}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo, variables: !10)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !{!11, !12, !13, !14, !16}
!11 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!13 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!14 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !15, file: !1, line: 5, type: !9)
!15 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!16 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !17, file: !1, line: 6, type: !9)
!17 = distinct !DILexicalBlock(scope: !18, file: !1, line: 6, column: 5)
!18 = distinct !DILexicalBlock(scope: !19, file: !1, line: 5, column: 31)
!19 = distinct !DILexicalBlock(scope: !15, file: !1, line: 5, column: 3)
!20 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo2, variables: !21)
!21 = !{!22, !23, !24, !25, !27}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !20, file: !1, line: 12, type: !7)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !20, file: !1, line: 12, type: !7)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !20, file: !1, line: 12, type: !9)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !1, line: 13, type: !9)
!26 = distinct !DILexicalBlock(scope: !20, file: !1, line: 13, column: 3)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !28, file: !1, line: 14, type: !9)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 14, column: 5)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 13, column: 31)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 13, column: 3)
!31 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !32, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**)* @call_foo, variables: !34)
!32 = !DISubroutineType(types: !33)
!33 = !{null, !7, !7}
!34 = !{!35, !36}
!35 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !31, file: !1, line: 20, type: !7)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !31, file: !1, line: 20, type: !7)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!40 = !DIExpression()
!41 = !DILocation(line: 4, column: 16, scope: !4)
!42 = !DILocation(line: 4, column: 25, scope: !4)
!43 = !DILocation(line: 4, column: 32, scope: !4)
!44 = !DILocation(line: 5, column: 12, scope: !15)
!45 = !DILocation(line: 5, column: 8, scope: !15)
!46 = !DILocation(line: 5, column: 21, scope: !19)
!47 = !DILocation(line: 5, column: 3, scope: !15)
!48 = !DILocation(line: 10, column: 1, scope: !4)
!49 = !DILocation(line: 6, column: 14, scope: !17)
!50 = !DILocation(line: 6, column: 10, scope: !17)
!51 = !DILocation(line: 6, column: 23, scope: !52)
!52 = distinct !DILexicalBlock(scope: !17, file: !1, line: 6, column: 5)
!53 = !DILocation(line: 6, column: 5, scope: !17)
!54 = !DILocation(line: 5, column: 27, scope: !19)
!55 = !DILocation(line: 5, column: 3, scope: !19)
!56 = !DILocation(line: 7, column: 17, scope: !57)
!57 = distinct !DILexicalBlock(scope: !52, file: !1, line: 6, column: 33)
!58 = !{!59, !59, i64 0}
!59 = !{!"any pointer", !60, i64 0}
!60 = !{!"omnipotent char", !61, i64 0}
!61 = !{!"Simple C/C++ TBAA"}
!62 = !{!63, !63, i64 0}
!63 = !{!"int", !60, i64 0}
!64 = !DILocation(line: 7, column: 27, scope: !57)
!65 = !DILocation(line: 7, column: 25, scope: !57)
!66 = !DILocation(line: 7, column: 15, scope: !57)
!67 = !DILocation(line: 6, column: 29, scope: !52)
!68 = !DILocation(line: 6, column: 5, scope: !52)
!69 = !DILocation(line: 12, column: 17, scope: !20)
!70 = !DILocation(line: 12, column: 26, scope: !20)
!71 = !DILocation(line: 12, column: 33, scope: !20)
!72 = !DILocation(line: 13, column: 12, scope: !26)
!73 = !DILocation(line: 13, column: 8, scope: !26)
!74 = !DILocation(line: 13, column: 21, scope: !30)
!75 = !DILocation(line: 13, column: 3, scope: !26)
!76 = !DILocation(line: 18, column: 1, scope: !20)
!77 = !DILocation(line: 14, column: 14, scope: !28)
!78 = !DILocation(line: 14, column: 10, scope: !28)
!79 = !DILocation(line: 14, column: 23, scope: !80)
!80 = distinct !DILexicalBlock(scope: !28, file: !1, line: 14, column: 5)
!81 = !DILocation(line: 14, column: 5, scope: !28)
!82 = !DILocation(line: 13, column: 27, scope: !30)
!83 = !DILocation(line: 13, column: 3, scope: !30)
!84 = !DILocation(line: 15, column: 17, scope: !85)
!85 = distinct !DILexicalBlock(scope: !80, file: !1, line: 14, column: 33)
!86 = !DILocation(line: 15, column: 27, scope: !85)
!87 = !DILocation(line: 15, column: 25, scope: !85)
!88 = !DILocation(line: 15, column: 15, scope: !85)
!89 = !DILocation(line: 14, column: 29, scope: !80)
!90 = !DILocation(line: 14, column: 5, scope: !80)
!91 = !DILocation(line: 20, column: 21, scope: !31)
!92 = !DILocation(line: 20, column: 30, scope: !31)
!93 = !DILocation(line: 21, column: 3, scope: !31)
!94 = !DILocation(line: 22, column: 12, scope: !31)
!95 = !DILocation(line: 22, column: 3, scope: !31)
!96 = !DILocation(line: 23, column: 3, scope: !31)
!97 = !DILocation(line: 24, column: 1, scope: !31)
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  store i32 %add, i32* %arrayidx10, align 4, !dbg !66, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !67
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !68
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !50

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !51
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !53

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !54
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !55

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !56
  %idxprom5 = sext i32 %i.0 to i64, !dbg !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !56
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !56, !tbaa !58
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !56
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !56, !tbaa !62
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !64
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !64, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !64
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !64, !tbaa !62
  %add = add nsw i32 %1, %3, !dbg !65
  store i32 %add, i32* %arrayidx10, align 4, !dbg !66, !tbaa !62
  %inc = add nsw i32 %j.0, 1, !dbg !67
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !49
  br label %for.cond.1, !dbg !68
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !68
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !71
  br label %for.cond, !dbg !72

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !73
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !74

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !75

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !76
  br label %for.cond.1, !dbg !77

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !78
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !80

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !81
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !71
  br label %for.cond, !dbg !82

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !83
  %idxprom5 = sext i32 %i.0 to i64, !dbg !83
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !83
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !83, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !83
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !83, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !85
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !85, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !85
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !85, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !86
  store i32 %add, i32* %arrayidx10, align 4, !dbg !87, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !88
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !76
  br label %for.cond.1, !dbg !89
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !68
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !69
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !70
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !71
  br label %for.cond, !dbg !72

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !73
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !dbg !74

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !75

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !40), !dbg !76
  br label %for.cond.1, !dbg !77

for.cond.1:                                       ; preds = %for.body.4, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.body.4 ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !78
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !80

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !81
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !71
  br label %for.cond, !dbg !82

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !83
  %idxprom5 = sext i32 %i.0 to i64, !dbg !83
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !83
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !83, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !83
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !83, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !85
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !85, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !85
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !85, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !86
  store i32 %add, i32* %arrayidx10, align 4, !dbg !87, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !88
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !76
  br label %for.cond.1, !dbg !89
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !89
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !90
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !91
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !92
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !93
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !94
  ret void, !dbg !95
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !89
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !90
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !91
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !92
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !93
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !94
  ret void, !dbg !95
}
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Reassociate expressions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %3, %1, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.cleanup, !dbg !47

for.cond.1.preheader:                             ; preds = %for.cond
  br label %for.cond.1, !dbg !48

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !50

for.cond.1:                                       ; preds = %for.cond.1.preheader, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond.1.preheader ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %3, %1, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Rotate Loops ***
for.cond.1:                                       ; preds = %for.cond.1.preheader, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond.1.preheader ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %3, %1, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
*** IR Dump Before Loop Invariant Code Motion ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %3, %1, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.031, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  %cmp2 = icmp slt i32 %inc, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !50
*** IR Dump Before Unswitch loops ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !51
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !51
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !51, !tbaa !61
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !57
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !57, !tbaa !61
  %add = add nsw i32 %3, %2, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !61
  %inc = add nsw i32 %j.031, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  %cmp2 = icmp slt i32 %inc, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !50
*** IR Dump Before Rotate Loops ***
for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.cleanup, !dbg !47

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.0, 1, !dbg !59
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  br label %for.cond, !dbg !60

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !51
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !51
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !51, !tbaa !61
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !57
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !57, !tbaa !61
  %add = add nsw i32 %3, %2, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !61
  %inc = add nsw i32 %j.031, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !66
  %cmp2 = icmp slt i32 %inc, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !50

for.cond.1.preheader:                             ; preds = %for.cond
  %cmp2.30 = icmp slt i32 0, %n, !dbg !48
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !50

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.0 to i64, !dbg !51
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !51
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !51, !tbaa !53
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !57
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !57, !tbaa !53
  br label %for.body.4, !dbg !50

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !50
*** IR Dump Before Loop Invariant Code Motion ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp2.30 = icmp slt i32 0, %n, !dbg !47
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Unswitch loops ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp slt i32 0, %n, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp slt i32 0, %n, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Induction Variable Simplification ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !16, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
*** IR Dump Before Recognize loop idioms ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !63
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
*** IR Dump Before Delete dead loops ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !63
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
*** IR Dump Before Induction Variable Simplification ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !63
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Recognize loop idioms ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !14, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Delete dead loops ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !14, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !14, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !14, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !14, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !14, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !46

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !57

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.for.cond.cleanup_crit_edge, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.cond.1.for.cond.cleanup.3_crit_edge, label %for.body.4, !dbg !49
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !47
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !57

for.cond.cleanup.3:                               ; preds = %for.body.4, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !49
}
*** IR Dump Before Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !47
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !47
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !46

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47
}
*** IR Dump Before Loop Invariant Code Motion ***
for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47
*** IR Dump Before Loop Invariant Code Motion ***
for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !46

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !46
*** IR Dump Before Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !46

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !46

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !46

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !46

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !42
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !43
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !45

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !47

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !48

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !49
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !52
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !53

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %1, %3, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Reassociate expressions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %1, %3, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1, label %for.cond.cleanup, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !68

for.cond.1:                                       ; preds = %for.cond, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !69
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %3, %1, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !65

for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !66
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.cleanup, !dbg !67

for.cond.1.preheader:                             ; preds = %for.cond
  br label %for.cond.1, !dbg !68

for.cond.cleanup:                                 ; preds = %for.cond
  ret void, !dbg !70

for.cond.1:                                       ; preds = %for.cond.1.preheader, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond.1.preheader ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !68
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !71

for.cond.cleanup.3:                               ; preds = %for.cond.1
  %inc16 = add nsw i32 %i.0, 1, !dbg !72
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  br label %for.cond, !dbg !73

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !74
  %idxprom5 = sext i32 %i.0 to i64, !dbg !74
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !74
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !74, !tbaa !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !74
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !74, !tbaa !57
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !76
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !76, !tbaa !50
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !76
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %add = add nsw i32 %3, %1, !dbg !77
  store i32 %add, i32* %arrayidx10, align 4, !dbg !78, !tbaa !57
  %inc = add nsw i32 %j.0, 1, !dbg !79
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !80
  br label %for.cond.1, !dbg !81
}
*** IR Dump Before Rotate Loops ***
for.cond.1:                                       ; preds = %for.cond.1.preheader, %for.body.4
  %j.0 = phi i32 [ %inc, %for.body.4 ], [ 0, %for.cond.1.preheader ]
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.cleanup.3, !dbg !51

for.body.4:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %3, %1, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.0, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  br label %for.cond.1, !dbg !67
*** IR Dump Before Loop Invariant Code Motion ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !54
  %idxprom5 = sext i32 %i.0 to i64, !dbg !54
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !54
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !54, !tbaa !56
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !54
  %1 = load i32, i32* %arrayidx6, align 4, !dbg !54, !tbaa !60
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !62
  %2 = load i32*, i32** %arrayidx9, align 8, !dbg !62, !tbaa !56
  %arrayidx10 = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !62
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !62, !tbaa !60
  %add = add nsw i32 %3, %1, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !60
  %inc = add nsw i32 %j.031, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  %cmp2 = icmp slt i32 %inc, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !50
*** IR Dump Before Unswitch loops ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !51
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !51
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !51, !tbaa !61
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !57
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !57, !tbaa !61
  %add = add nsw i32 %3, %2, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !61
  %inc = add nsw i32 %j.031, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  %cmp2 = icmp slt i32 %inc, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !50
*** IR Dump Before Rotate Loops ***
for.cond:                                         ; preds = %for.cond.cleanup.3, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp = icmp slt i32 %i.0, %n, !dbg !46
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.cleanup, !dbg !47

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.0, 1, !dbg !59
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  br label %for.cond, !dbg !60

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !51
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !51
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !51, !tbaa !61
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !57
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !57, !tbaa !61
  %add = add nsw i32 %3, %2, !dbg !63
  store i32 %add, i32* %arrayidx10, align 4, !dbg !64, !tbaa !61
  %inc = add nsw i32 %j.031, 1, !dbg !65
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !66
  %cmp2 = icmp slt i32 %inc, %n, !dbg !48
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !50

for.cond.1.preheader:                             ; preds = %for.cond
  %cmp2.30 = icmp slt i32 0, %n, !dbg !48
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !50

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.0 to i64, !dbg !51
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !51
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !51, !tbaa !53
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !57
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !57, !tbaa !53
  br label %for.body.4, !dbg !50

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !50
*** IR Dump Before Loop Invariant Code Motion ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  %cmp2.30 = icmp slt i32 0, %n, !dbg !47
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Unswitch loops ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp slt i32 0, %n, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp slt i32 0, %n, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !70
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !74
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp = icmp slt i32 %inc16, %n, !dbg !65
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !70
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !75
  store i32 %add, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %inc = add nsw i32 %j.031, 1, !dbg !77
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !78
  %cmp2 = icmp slt i32 %inc, %n, !dbg !67
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !70
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !74
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp = icmp slt i32 %inc16, %n, !dbg !65
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !70
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !75
  store i32 %add, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %inc = add nsw i32 %j.031, 1, !dbg !77
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !78
  %cmp2 = icmp slt i32 %inc, %n, !dbg !67
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !70
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !74
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp = icmp slt i32 %inc16, %n, !dbg !65
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !70
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !75
  store i32 %add, i32* %arrayidx10, align 4, !dbg !76, !tbaa !57
  %inc = add nsw i32 %j.031, 1, !dbg !77
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !78
  %cmp2 = icmp slt i32 %inc, %n, !dbg !67
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Induction Variable Simplification ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %j.031 = phi i32 [ 0, %for.body.4.lr.ph ], [ %inc, %for.body.4 ]
  %idxprom = sext i32 %j.031 to i64, !dbg !50
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %inc = add nsw i32 %j.031, 1, !dbg !63
  tail call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !27, metadata !40), !dbg !64
  %cmp2 = icmp slt i32 %inc, %n, !dbg !47
  br i1 %cmp2, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
*** IR Dump Before Recognize loop idioms ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !63
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
*** IR Dump Before Delete dead loops ***
for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !63
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49
*** IR Dump Before Induction Variable Simplification ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %i.033 = phi i32 [ 0, %for.cond.1.preheader.lr.ph ], [ %inc16, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %inc16 = add nsw i32 %i.033, 1, !dbg !58
  tail call void @llvm.dbg.value(metadata i32 %inc16, i64 0, metadata !25, metadata !40), !dbg !44
  %cmp = icmp slt i32 %inc16, %n, !dbg !45
  br i1 %cmp, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !59
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !59
  %add = add nsw i32 %3, %2, !dbg !61
  store i32 %add, i32* %arrayidx10, align 4, !dbg !62, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !63
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %idxprom5 = sext i32 %i.033 to i64, !dbg !50
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom5, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %idxprom5, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Recognize loop idioms ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !25, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before Delete dead loops ***
for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !49

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !25, metadata !40), !dbg !44
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !46

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !50
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !50, !tbaa !58
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !56
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !56, !tbaa !58
  %add = add nsw i32 %3, %2, !dbg !60
  store i32 %add, i32* %arrayidx10, align 4, !dbg !61, !tbaa !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !49
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !62
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !49
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !49
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !49

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !50
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !50, !tbaa !52
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !56
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !56, !tbaa !52
  br label %for.body.4, !dbg !49

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !49
*** IR Dump Before MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !25, metadata !40), !dbg !64
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !74
  store i32 %add, i32* %arrayidx10, align 4, !dbg !75, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !69
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !76
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !69
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !69
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !25, metadata !40), !dbg !64
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !74
  store i32 %add, i32* %arrayidx10, align 4, !dbg !75, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !69
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !76
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !69
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !69
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !25, metadata !40), !dbg !64
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !74
  store i32 %add, i32* %arrayidx10, align 4, !dbg !75, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !69
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !76
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !69
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !69
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.1.preheader.lr.ph, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !25, metadata !40), !dbg !64
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp ne i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.1.preheader, label %for.cond.for.cond.cleanup_crit_edge, !dbg !66

for.body.4:                                       ; preds = %for.body.4.lr.ph, %for.body.4
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !74
  store i32 %add, i32* %arrayidx10, align 4, !dbg !75, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !69
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !27, metadata !40), !dbg !76
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !69
  %exitcond = icmp ne i32 %lftr.wideiv, %n, !dbg !69
  br i1 %exitcond, label %for.body.4, label %for.cond.1.for.cond.cleanup.3_crit_edge, !dbg !69
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.for.cond.cleanup_crit_edge:              ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !66

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %entry
  ret void, !dbg !73

for.cond.1.for.cond.cleanup.3_crit_edge:          ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !69

for.cond.cleanup.3:                               ; preds = %for.cond.1.for.cond.cleanup.3_crit_edge, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.for.cond.cleanup_crit_edge, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !74
  store i32 %add, i32* %arrayidx10, align 4, !dbg !75, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !69
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !69
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !69
  br i1 %exitcond, label %for.cond.1.for.cond.cleanup.3_crit_edge, label %for.body.4, !dbg !69
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  %cmp2.30 = icmp sgt i32 %n, 0, !dbg !67
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 %cmp2.30, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !69

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !70
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !70, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !72
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !72, !tbaa !50
  br label %for.body.4, !dbg !69

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !73

for.cond.cleanup.3:                               ; preds = %for.body.4, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !70
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !70, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !72
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !72, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !74
  store i32 %add, i32* %arrayidx10, align 4, !dbg !75, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !69
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !69
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !69
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !69
}
*** IR Dump Before Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !68
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !68, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !71
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !71, !tbaa !50
  br label %for.body.4, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !68
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !68, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !71
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !71, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !67
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !67
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !67
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !67
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !68
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !68, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !71
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !71, !tbaa !50
  br label %for.body.4, !dbg !67

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !68
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !68, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !71
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !71, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !67
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !67
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !67
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !67
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !68
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !68, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !71
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !71, !tbaa !50
  br label %for.body.4, !dbg !67

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !66

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !68
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !68, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !71
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !71, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !67
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !67
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !67
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !67
}
*** IR Dump Before Loop Invariant Code Motion ***
for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47
*** IR Dump Before Loop Invariant Code Motion ***
for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !48
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !48, !tbaa !51
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !55
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !55, !tbaa !51
  br label %for.body.4, !dbg !47

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !48
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !48, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !55
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !55, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !47
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !47
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !47
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !47

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !46

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !46
*** IR Dump Before Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !68
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !68, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !71
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !71, !tbaa !50
  br label %for.body.4, !dbg !67

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !66

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !68
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !68, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !71
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !71, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !67
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !67
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !67
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !67
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.cond.1.preheader.lr.ph, label %for.cond.cleanup, !dbg !66

for.cond.1.preheader.lr.ph:                       ; preds = %entry
  br label %for.cond.1.preheader, !dbg !66

for.cond.1.preheader:                             ; preds = %for.cond.cleanup.3, %for.cond.1.preheader.lr.ph
  %indvars.iv34 = phi i64 [ 0, %for.cond.1.preheader.lr.ph ], [ %indvars.iv.next35, %for.cond.cleanup.3 ]
  br i1 true, label %for.body.4.lr.ph, label %for.cond.cleanup.3, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.cond.1.preheader
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !68
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !68, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !71
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !71, !tbaa !50
  br label %for.body.4, !dbg !67

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3.loopexit:                      ; preds = %for.body.4
  br label %for.cond.cleanup.3, !dbg !66

for.cond.cleanup.3:                               ; preds = %for.cond.cleanup.3.loopexit, %for.cond.1.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.cond.1.preheader, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !68
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !68, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !71
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !71, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !67
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !67
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !67
  br i1 %exitcond, label %for.cond.cleanup.3.loopexit, label %for.body.4, !dbg !67
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !42
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !43
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !44
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !45
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !46
  ret void, !dbg !47
}
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !42
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !43
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !44
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !45
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !46
  ret void, !dbg !47
}
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !41
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !42
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !43
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !44
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !45
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !46
  ret void, !dbg !47
}
*** IR Dump Before SROA ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Early CSE ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Tail Call Elimination ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Reassociate expressions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before MemCpy Optimization ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Sparse Conditional Constant Propagation ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Bit-Tracking Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Jump Threading ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Value Propagation ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Dead Store Elimination ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Aggressive Dead Code Elimination ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Remove unused exception handling info ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1
*** IR Dump Before Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1
*** IR Dump Before Deduce function attributes ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1
*** IR Dump Before Remove unused exception handling info ***
Printing <null> Function
*** IR Dump Before Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump Before Deduce function attributes ***
Printing <null> Function
*** IR Dump Before A No-Op Barrier Pass ***; ModuleID = '/home/gleison/Desktop/Projetos/Examples/test3.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !20, !31}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo, variables: !10)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !{!11, !12, !13, !14, !16}
!11 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!13 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!14 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !15, file: !1, line: 5, type: !9)
!15 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!16 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !17, file: !1, line: 6, type: !9)
!17 = distinct !DILexicalBlock(scope: !18, file: !1, line: 6, column: 5)
!18 = distinct !DILexicalBlock(scope: !19, file: !1, line: 5, column: 31)
!19 = distinct !DILexicalBlock(scope: !15, file: !1, line: 5, column: 3)
!20 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo2, variables: !21)
!21 = !{!22, !23, !24, !25, !27}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !20, file: !1, line: 12, type: !7)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !20, file: !1, line: 12, type: !7)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !20, file: !1, line: 12, type: !9)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !1, line: 13, type: !9)
!26 = distinct !DILexicalBlock(scope: !20, file: !1, line: 13, column: 3)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !28, file: !1, line: 14, type: !9)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 14, column: 5)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 13, column: 31)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 13, column: 3)
!31 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !32, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**)* @call_foo, variables: !34)
!32 = !DISubroutineType(types: !33)
!33 = !{null, !7, !7}
!34 = !{!35, !36}
!35 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !31, file: !1, line: 20, type: !7)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !31, file: !1, line: 20, type: !7)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!40 = !DIExpression()
!41 = !DILocation(line: 4, column: 16, scope: !4)
!42 = !DILocation(line: 4, column: 25, scope: !4)
!43 = !DILocation(line: 4, column: 32, scope: !4)
!44 = !DILocation(line: 5, column: 12, scope: !15)
!45 = !DILocation(line: 5, column: 21, scope: !19)
!46 = !DILocation(line: 5, column: 3, scope: !15)
!47 = !DILocation(line: 7, column: 17, scope: !48)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 6, column: 33)
!49 = distinct !DILexicalBlock(scope: !17, file: !1, line: 6, column: 5)
!50 = !{!51, !51, i64 0}
!51 = !{!"any pointer", !52, i64 0}
!52 = !{!"omnipotent char", !53, i64 0}
!53 = !{!"Simple C/C++ TBAA"}
!54 = !DILocation(line: 7, column: 27, scope: !48)
!55 = !DILocation(line: 6, column: 5, scope: !17)
!56 = !DILocation(line: 10, column: 1, scope: !4)
!57 = !{!58, !58, i64 0}
!58 = !{!"int", !52, i64 0}
!59 = !DILocation(line: 7, column: 25, scope: !48)
!60 = !DILocation(line: 7, column: 15, scope: !48)
!61 = !DILocation(line: 12, column: 17, scope: !20)
!62 = !DILocation(line: 12, column: 26, scope: !20)
!63 = !DILocation(line: 12, column: 33, scope: !20)
!64 = !DILocation(line: 13, column: 12, scope: !26)
!65 = !DILocation(line: 13, column: 21, scope: !30)
!66 = !DILocation(line: 13, column: 3, scope: !26)
!67 = !DILocation(line: 15, column: 17, scope: !68)
!68 = distinct !DILexicalBlock(scope: !69, file: !1, line: 14, column: 33)
!69 = distinct !DILexicalBlock(scope: !28, file: !1, line: 14, column: 5)
!70 = !DILocation(line: 15, column: 27, scope: !68)
!71 = !DILocation(line: 14, column: 5, scope: !28)
!72 = !DILocation(line: 18, column: 1, scope: !20)
!73 = !DILocation(line: 15, column: 25, scope: !68)
!74 = !DILocation(line: 15, column: 15, scope: !68)
!75 = !DILocation(line: 20, column: 21, scope: !31)
!76 = !DILocation(line: 20, column: 30, scope: !31)
!77 = !DILocation(line: 21, column: 3, scope: !31)
!78 = !DILocation(line: 22, column: 12, scope: !31)
!79 = !DILocation(line: 22, column: 3, scope: !31)
!80 = !DILocation(line: 23, column: 3, scope: !31)
!81 = !DILocation(line: 24, column: 1, scope: !31)
*** IR Dump Before Float to int ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Rotate Loops ***
for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
*** IR Dump Before Rotate Loops ***
for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !46
*** IR Dump Before Loop Vectorization ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !47

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !56

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %entry, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %entry, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}
*** IR Dump Before Float to int ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %for.cond.cleanup.3, %entry
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Rotate Loops ***
for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
*** IR Dump Before Rotate Loops ***
for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !46
*** IR Dump Before Loop Vectorization ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph.preheader, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph.preheader:                       ; preds = %entry
  br label %for.body.4.lr.ph, !dbg !67

for.body.4.lr.ph:                                 ; preds = %for.body.4.lr.ph.preheader, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %for.body.4.lr.ph.preheader ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup.loopexit:                        ; preds = %for.cond.cleanup.3
  br label %for.cond.cleanup, !dbg !72

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup.loopexit, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %entry, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %entry, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}
*** IR Dump Before Float to int ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Loop-Closed SSA Form Pass ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Loop Vectorization ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Simplify the CFG ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Combine redundant instructions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Alignment from assumptions ***
; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}
*** IR Dump Before Strip Unused Function Prototypes ***; ModuleID = '/home/gleison/Desktop/Projetos/Examples/test3.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !11, metadata !40), !dbg !41
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !12, metadata !40), !dbg !42
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !13, metadata !40), !dbg !43
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !14, metadata !40), !dbg !44
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !45
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !46

for.body.4.lr.ph:                                 ; preds = %entry, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !47
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !47, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !54
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !54, !tbaa !50
  br label %for.body.4, !dbg !55

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !56

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !46
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !46
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !46
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !46

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !47
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !47, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !54
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !54, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !59
  store i32 %add, i32* %arrayidx10, align 4, !dbg !60, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !55
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !55
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !55
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !55
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define void @foo2(i32** nocapture readonly %a, i32** nocapture readonly %b, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !22, metadata !40), !dbg !61
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !23, metadata !40), !dbg !62
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !40), !dbg !63
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !25, metadata !40), !dbg !64
  %cmp.32 = icmp sgt i32 %n, 0, !dbg !65
  br i1 %cmp.32, label %for.body.4.lr.ph, label %for.cond.cleanup, !dbg !66

for.body.4.lr.ph:                                 ; preds = %entry, %for.cond.cleanup.3
  %indvars.iv34 = phi i64 [ %indvars.iv.next35, %for.cond.cleanup.3 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %indvars.iv34, !dbg !67
  %0 = load i32*, i32** %arrayidx, align 8, !dbg !67, !tbaa !50
  %arrayidx9 = getelementptr inbounds i32*, i32** %a, i64 %indvars.iv34, !dbg !70
  %1 = load i32*, i32** %arrayidx9, align 8, !dbg !70, !tbaa !50
  br label %for.body.4, !dbg !71

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.3, %entry
  ret void, !dbg !72

for.cond.cleanup.3:                               ; preds = %for.body.4
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1, !dbg !66
  %lftr.wideiv36 = trunc i64 %indvars.iv.next35 to i32, !dbg !66
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %n, !dbg !66
  br i1 %exitcond37, label %for.cond.cleanup, label %for.body.4.lr.ph, !dbg !66

for.body.4:                                       ; preds = %for.body.4, %for.body.4.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.4.lr.ph ], [ %indvars.iv.next, %for.body.4 ]
  %arrayidx6 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv, !dbg !67
  %2 = load i32, i32* %arrayidx6, align 4, !dbg !67, !tbaa !57
  %arrayidx10 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv, !dbg !70
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !70, !tbaa !57
  %add = add nsw i32 %3, %2, !dbg !73
  store i32 %add, i32* %arrayidx10, align 4, !dbg !74, !tbaa !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !71
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !71
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !71
  br i1 %exitcond, label %for.cond.cleanup.3, label %for.body.4, !dbg !71
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** nocapture readonly %a, i32** nocapture readonly %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !35, metadata !40), !dbg !75
  tail call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !36, metadata !40), !dbg !76
  tail call void @foo(i32** %a, i32** %b, i32 100), !dbg !77
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !78
  tail call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !79
  tail call void @foo2(i32** %a, i32** %b, i32 100), !dbg !80
  ret void, !dbg !81
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!37, !38}
!llvm.ident = !{!39}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !20, !31}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo, variables: !10)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !{!11, !12, !13, !14, !16}
!11 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!12 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!13 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!14 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !15, file: !1, line: 5, type: !9)
!15 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!16 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !17, file: !1, line: 6, type: !9)
!17 = distinct !DILexicalBlock(scope: !18, file: !1, line: 6, column: 5)
!18 = distinct !DILexicalBlock(scope: !19, file: !1, line: 5, column: 31)
!19 = distinct !DILexicalBlock(scope: !15, file: !1, line: 5, column: 3)
!20 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**, i32)* @foo2, variables: !21)
!21 = !{!22, !23, !24, !25, !27}
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !20, file: !1, line: 12, type: !7)
!23 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !20, file: !1, line: 12, type: !7)
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !20, file: !1, line: 12, type: !9)
!25 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !26, file: !1, line: 13, type: !9)
!26 = distinct !DILexicalBlock(scope: !20, file: !1, line: 13, column: 3)
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !28, file: !1, line: 14, type: !9)
!28 = distinct !DILexicalBlock(scope: !29, file: !1, line: 14, column: 5)
!29 = distinct !DILexicalBlock(scope: !30, file: !1, line: 13, column: 31)
!30 = distinct !DILexicalBlock(scope: !26, file: !1, line: 13, column: 3)
!31 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !32, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: true, function: void (i32**, i32**)* @call_foo, variables: !34)
!32 = !DISubroutineType(types: !33)
!33 = !{null, !7, !7}
!34 = !{!35, !36}
!35 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !31, file: !1, line: 20, type: !7)
!36 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !31, file: !1, line: 20, type: !7)
!37 = !{i32 2, !"Dwarf Version", i32 4}
!38 = !{i32 2, !"Debug Info Version", i32 3}
!39 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!40 = !DIExpression()
!41 = !DILocation(line: 4, column: 16, scope: !4)
!42 = !DILocation(line: 4, column: 25, scope: !4)
!43 = !DILocation(line: 4, column: 32, scope: !4)
!44 = !DILocation(line: 5, column: 12, scope: !15)
!45 = !DILocation(line: 5, column: 21, scope: !19)
!46 = !DILocation(line: 5, column: 3, scope: !15)
!47 = !DILocation(line: 7, column: 17, scope: !48)
!48 = distinct !DILexicalBlock(scope: !49, file: !1, line: 6, column: 33)
!49 = distinct !DILexicalBlock(scope: !17, file: !1, line: 6, column: 5)
!50 = !{!51, !51, i64 0}
!51 = !{!"any pointer", !52, i64 0}
!52 = !{!"omnipotent char", !53, i64 0}
!53 = !{!"Simple C/C++ TBAA"}
!54 = !DILocation(line: 7, column: 27, scope: !48)
!55 = !DILocation(line: 6, column: 5, scope: !17)
!56 = !DILocation(line: 10, column: 1, scope: !4)
!57 = !{!58, !58, i64 0}
!58 = !{!"int", !52, i64 0}
!59 = !DILocation(line: 7, column: 25, scope: !48)
!60 = !DILocation(line: 7, column: 15, scope: !48)
!61 = !DILocation(line: 12, column: 17, scope: !20)
!62 = !DILocation(line: 12, column: 26, scope: !20)
!63 = !DILocation(line: 12, column: 33, scope: !20)
!64 = !DILocation(line: 13, column: 12, scope: !26)
!65 = !DILocation(line: 13, column: 21, scope: !30)
!66 = !DILocation(line: 13, column: 3, scope: !26)
!67 = !DILocation(line: 15, column: 17, scope: !68)
!68 = distinct !DILexicalBlock(scope: !69, file: !1, line: 14, column: 33)
!69 = distinct !DILexicalBlock(scope: !28, file: !1, line: 14, column: 5)
!70 = !DILocation(line: 15, column: 27, scope: !68)
!71 = !DILocation(line: 14, column: 5, scope: !28)
!72 = !DILocation(line: 18, column: 1, scope: !20)
!73 = !DILocation(line: 15, column: 25, scope: !68)
!74 = !DILocation(line: 15, column: 15, scope: !68)
!75 = !DILocation(line: 20, column: 21, scope: !31)
!76 = !DILocation(line: 20, column: 30, scope: !31)
!77 = !DILocation(line: 21, column: 3, scope: !31)
!78 = !DILocation(line: 22, column: 12, scope: !31)
!79 = !DILocation(line: 22, column: 3, scope: !31)
!80 = !DILocation(line: 23, column: 3, scope: !31)
!81 = !DILocation(line: 24, column: 1, scope: !31)
