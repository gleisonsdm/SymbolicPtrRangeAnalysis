; ModuleID = '/home/gleison/Desktop/Projetos/Examples/test3.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !17, metadata !18), !dbg !19
  store i32** %b, i32*** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !20, metadata !18), !dbg !21
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !22, metadata !18), !dbg !23
  call void @llvm.dbg.declare(metadata i32* %i, metadata !24, metadata !18), !dbg !26
  store i32 0, i32* %i, align 4, !dbg !26
  br label %for.cond, !dbg !27

for.cond:                                         ; preds = %for.inc.14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !28
  %1 = load i32, i32* %n.addr, align 4, !dbg !32
  %cmp = icmp slt i32 %0, %1, !dbg !33
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !34

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %j, metadata !35, metadata !18), !dbg !38
  store i32 0, i32* %j, align 4, !dbg !38
  br label %for.cond.1, !dbg !39

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !40
  %3 = load i32, i32* %n.addr, align 4, !dbg !44
  %cmp2 = icmp slt i32 %2, %3, !dbg !45
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !46

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %j, align 4, !dbg !47
  %idxprom = sext i32 %4 to i64, !dbg !49
  %5 = load i32, i32* %i, align 4, !dbg !50
  %idxprom4 = sext i32 %5 to i64, !dbg !49
  %6 = load i32**, i32*** %b.addr, align 8, !dbg !49
  %arrayidx = getelementptr inbounds i32*, i32** %6, i64 %idxprom4, !dbg !49
  %7 = load i32*, i32** %arrayidx, align 8, !dbg !49
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !49
  %8 = load i32, i32* %arrayidx5, align 4, !dbg !49
  %9 = load i32, i32* %j, align 4, !dbg !51
  %idxprom6 = sext i32 %9 to i64, !dbg !52
  %10 = load i32, i32* %i, align 4, !dbg !53
  %idxprom7 = sext i32 %10 to i64, !dbg !52
  %11 = load i32**, i32*** %a.addr, align 8, !dbg !52
  %arrayidx8 = getelementptr inbounds i32*, i32** %11, i64 %idxprom7, !dbg !52
  %12 = load i32*, i32** %arrayidx8, align 8, !dbg !52
  %arrayidx9 = getelementptr inbounds i32, i32* %12, i64 %idxprom6, !dbg !52
  %13 = load i32, i32* %arrayidx9, align 4, !dbg !52
  %add = add nsw i32 %8, %13, !dbg !54
  %14 = load i32, i32* %j, align 4, !dbg !55
  %idxprom10 = sext i32 %14 to i64, !dbg !56
  %15 = load i32, i32* %i, align 4, !dbg !57
  %idxprom11 = sext i32 %15 to i64, !dbg !56
  %16 = load i32**, i32*** %a.addr, align 8, !dbg !56
  %arrayidx12 = getelementptr inbounds i32*, i32** %16, i64 %idxprom11, !dbg !56
  %17 = load i32*, i32** %arrayidx12, align 8, !dbg !56
  %arrayidx13 = getelementptr inbounds i32, i32* %17, i64 %idxprom10, !dbg !56
  store i32 %add, i32* %arrayidx13, align 4, !dbg !58
  br label %for.inc, !dbg !59

for.inc:                                          ; preds = %for.body.3
  %18 = load i32, i32* %j, align 4, !dbg !60
  %inc = add nsw i32 %18, 1, !dbg !60
  store i32 %inc, i32* %j, align 4, !dbg !60
  br label %for.cond.1, !dbg !61

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.14, !dbg !62

for.inc.14:                                       ; preds = %for.end
  %19 = load i32, i32* %i, align 4, !dbg !63
  %inc15 = add nsw i32 %19, 1, !dbg !63
  store i32 %inc15, i32* %i, align 4, !dbg !63
  br label %for.cond, !dbg !64

for.end.16:                                       ; preds = %for.cond
  ret void, !dbg !65
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32** %a, i32*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !66, metadata !18), !dbg !67
  store i32** %b, i32*** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !68, metadata !18), !dbg !69
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !70, metadata !18), !dbg !71
  call void @llvm.dbg.declare(metadata i32* %i, metadata !72, metadata !18), !dbg !74
  store i32 0, i32* %i, align 4, !dbg !74
  br label %for.cond, !dbg !75

for.cond:                                         ; preds = %for.inc.14, %entry
  %0 = load i32, i32* %i, align 4, !dbg !76
  %1 = load i32, i32* %n.addr, align 4, !dbg !80
  %cmp = icmp slt i32 %0, %1, !dbg !81
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !82

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %j, metadata !83, metadata !18), !dbg !86
  store i32 0, i32* %j, align 4, !dbg !86
  br label %for.cond.1, !dbg !87

for.cond.1:                                       ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !88
  %3 = load i32, i32* %n.addr, align 4, !dbg !92
  %cmp2 = icmp slt i32 %2, %3, !dbg !93
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !94

for.body.3:                                       ; preds = %for.cond.1
  %4 = load i32, i32* %j, align 4, !dbg !95
  %idxprom = sext i32 %4 to i64, !dbg !97
  %5 = load i32, i32* %i, align 4, !dbg !98
  %idxprom4 = sext i32 %5 to i64, !dbg !97
  %6 = load i32**, i32*** %b.addr, align 8, !dbg !97
  %arrayidx = getelementptr inbounds i32*, i32** %6, i64 %idxprom4, !dbg !97
  %7 = load i32*, i32** %arrayidx, align 8, !dbg !97
  %arrayidx5 = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !97
  %8 = load i32, i32* %arrayidx5, align 4, !dbg !97
  %9 = load i32, i32* %j, align 4, !dbg !99
  %idxprom6 = sext i32 %9 to i64, !dbg !100
  %10 = load i32, i32* %i, align 4, !dbg !101
  %idxprom7 = sext i32 %10 to i64, !dbg !100
  %11 = load i32**, i32*** %a.addr, align 8, !dbg !100
  %arrayidx8 = getelementptr inbounds i32*, i32** %11, i64 %idxprom7, !dbg !100
  %12 = load i32*, i32** %arrayidx8, align 8, !dbg !100
  %arrayidx9 = getelementptr inbounds i32, i32* %12, i64 %idxprom6, !dbg !100
  %13 = load i32, i32* %arrayidx9, align 4, !dbg !100
  %add = add nsw i32 %8, %13, !dbg !102
  %14 = load i32, i32* %j, align 4, !dbg !103
  %idxprom10 = sext i32 %14 to i64, !dbg !104
  %15 = load i32, i32* %i, align 4, !dbg !105
  %idxprom11 = sext i32 %15 to i64, !dbg !104
  %16 = load i32**, i32*** %a.addr, align 8, !dbg !104
  %arrayidx12 = getelementptr inbounds i32*, i32** %16, i64 %idxprom11, !dbg !104
  %17 = load i32*, i32** %arrayidx12, align 8, !dbg !104
  %arrayidx13 = getelementptr inbounds i32, i32* %17, i64 %idxprom10, !dbg !104
  store i32 %add, i32* %arrayidx13, align 4, !dbg !106
  br label %for.inc, !dbg !107

for.inc:                                          ; preds = %for.body.3
  %18 = load i32, i32* %j, align 4, !dbg !108
  %inc = add nsw i32 %18, 1, !dbg !108
  store i32 %inc, i32* %j, align 4, !dbg !108
  br label %for.cond.1, !dbg !109

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.14, !dbg !110

for.inc.14:                                       ; preds = %for.end
  %19 = load i32, i32* %i, align 4, !dbg !111
  %inc15 = add nsw i32 %19, 1, !dbg !111
  store i32 %inc15, i32* %i, align 4, !dbg !111
  br label %for.cond, !dbg !112

for.end.16:                                       ; preds = %for.cond
  ret void, !dbg !113
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  %a.addr = alloca i32**, align 8
  %b.addr = alloca i32**, align 8
  store i32** %a, i32*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %a.addr, metadata !114, metadata !18), !dbg !115
  store i32** %b, i32*** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %b.addr, metadata !116, metadata !18), !dbg !117
  %0 = load i32**, i32*** %a.addr, align 8, !dbg !118
  %1 = load i32**, i32*** %b.addr, align 8, !dbg !119
  call void @foo(i32** %0, i32** %1, i32 100), !dbg !120
  %2 = load i32**, i32*** %a.addr, align 8, !dbg !121
  %3 = load i32**, i32*** %a.addr, align 8, !dbg !122
  %add.ptr = getelementptr inbounds i32*, i32** %3, i64 50, !dbg !123
  call void @foo(i32** %2, i32** %add.ptr, i32 100), !dbg !124
  %4 = load i32**, i32*** %a.addr, align 8, !dbg !125
  %5 = load i32**, i32*** %b.addr, align 8, !dbg !126
  call void @foo2(i32** %4, i32** %5, i32 100), !dbg !127
  ret void, !dbg !128
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15}
!llvm.ident = !{!16}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !10, !11}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: false, function: void (i32**, i32**, i32)* @foo, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, function: void (i32**, i32**, i32)* @foo2, variables: !2)
!11 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !12, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, function: void (i32**, i32**)* @call_foo, variables: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{null, !7, !7}
!14 = !{i32 2, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!17 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!18 = !DIExpression()
!19 = !DILocation(line: 4, column: 16, scope: !4)
!20 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!21 = !DILocation(line: 4, column: 25, scope: !4)
!22 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!23 = !DILocation(line: 4, column: 32, scope: !4)
!24 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !25, file: !1, line: 5, type: !9)
!25 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!26 = !DILocation(line: 5, column: 12, scope: !25)
!27 = !DILocation(line: 5, column: 8, scope: !25)
!28 = !DILocation(line: 5, column: 19, scope: !29)
!29 = !DILexicalBlockFile(scope: !30, file: !1, discriminator: 2)
!30 = !DILexicalBlockFile(scope: !31, file: !1, discriminator: 1)
!31 = distinct !DILexicalBlock(scope: !25, file: !1, line: 5, column: 3)
!32 = !DILocation(line: 5, column: 23, scope: !31)
!33 = !DILocation(line: 5, column: 21, scope: !31)
!34 = !DILocation(line: 5, column: 3, scope: !25)
!35 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !36, file: !1, line: 6, type: !9)
!36 = distinct !DILexicalBlock(scope: !37, file: !1, line: 6, column: 5)
!37 = distinct !DILexicalBlock(scope: !31, file: !1, line: 5, column: 31)
!38 = !DILocation(line: 6, column: 14, scope: !36)
!39 = !DILocation(line: 6, column: 10, scope: !36)
!40 = !DILocation(line: 6, column: 21, scope: !41)
!41 = !DILexicalBlockFile(scope: !42, file: !1, discriminator: 2)
!42 = !DILexicalBlockFile(scope: !43, file: !1, discriminator: 1)
!43 = distinct !DILexicalBlock(scope: !36, file: !1, line: 6, column: 5)
!44 = !DILocation(line: 6, column: 25, scope: !43)
!45 = !DILocation(line: 6, column: 23, scope: !43)
!46 = !DILocation(line: 6, column: 5, scope: !36)
!47 = !DILocation(line: 7, column: 22, scope: !48)
!48 = distinct !DILexicalBlock(scope: !43, file: !1, line: 6, column: 33)
!49 = !DILocation(line: 7, column: 17, scope: !48)
!50 = !DILocation(line: 7, column: 19, scope: !48)
!51 = !DILocation(line: 7, column: 32, scope: !48)
!52 = !DILocation(line: 7, column: 27, scope: !48)
!53 = !DILocation(line: 7, column: 29, scope: !48)
!54 = !DILocation(line: 7, column: 25, scope: !48)
!55 = !DILocation(line: 7, column: 12, scope: !48)
!56 = !DILocation(line: 7, column: 7, scope: !48)
!57 = !DILocation(line: 7, column: 9, scope: !48)
!58 = !DILocation(line: 7, column: 15, scope: !48)
!59 = !DILocation(line: 8, column: 5, scope: !48)
!60 = !DILocation(line: 6, column: 29, scope: !43)
!61 = !DILocation(line: 6, column: 5, scope: !43)
!62 = !DILocation(line: 9, column: 3, scope: !37)
!63 = !DILocation(line: 5, column: 27, scope: !31)
!64 = !DILocation(line: 5, column: 3, scope: !31)
!65 = !DILocation(line: 10, column: 1, scope: !4)
!66 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !10, file: !1, line: 12, type: !7)
!67 = !DILocation(line: 12, column: 17, scope: !10)
!68 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !10, file: !1, line: 12, type: !7)
!69 = !DILocation(line: 12, column: 26, scope: !10)
!70 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !10, file: !1, line: 12, type: !9)
!71 = !DILocation(line: 12, column: 33, scope: !10)
!72 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !73, file: !1, line: 13, type: !9)
!73 = distinct !DILexicalBlock(scope: !10, file: !1, line: 13, column: 3)
!74 = !DILocation(line: 13, column: 12, scope: !73)
!75 = !DILocation(line: 13, column: 8, scope: !73)
!76 = !DILocation(line: 13, column: 19, scope: !77)
!77 = !DILexicalBlockFile(scope: !78, file: !1, discriminator: 2)
!78 = !DILexicalBlockFile(scope: !79, file: !1, discriminator: 1)
!79 = distinct !DILexicalBlock(scope: !73, file: !1, line: 13, column: 3)
!80 = !DILocation(line: 13, column: 23, scope: !79)
!81 = !DILocation(line: 13, column: 21, scope: !79)
!82 = !DILocation(line: 13, column: 3, scope: !73)
!83 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !84, file: !1, line: 14, type: !9)
!84 = distinct !DILexicalBlock(scope: !85, file: !1, line: 14, column: 5)
!85 = distinct !DILexicalBlock(scope: !79, file: !1, line: 13, column: 31)
!86 = !DILocation(line: 14, column: 14, scope: !84)
!87 = !DILocation(line: 14, column: 10, scope: !84)
!88 = !DILocation(line: 14, column: 21, scope: !89)
!89 = !DILexicalBlockFile(scope: !90, file: !1, discriminator: 2)
!90 = !DILexicalBlockFile(scope: !91, file: !1, discriminator: 1)
!91 = distinct !DILexicalBlock(scope: !84, file: !1, line: 14, column: 5)
!92 = !DILocation(line: 14, column: 25, scope: !91)
!93 = !DILocation(line: 14, column: 23, scope: !91)
!94 = !DILocation(line: 14, column: 5, scope: !84)
!95 = !DILocation(line: 15, column: 22, scope: !96)
!96 = distinct !DILexicalBlock(scope: !91, file: !1, line: 14, column: 33)
!97 = !DILocation(line: 15, column: 17, scope: !96)
!98 = !DILocation(line: 15, column: 19, scope: !96)
!99 = !DILocation(line: 15, column: 32, scope: !96)
!100 = !DILocation(line: 15, column: 27, scope: !96)
!101 = !DILocation(line: 15, column: 29, scope: !96)
!102 = !DILocation(line: 15, column: 25, scope: !96)
!103 = !DILocation(line: 15, column: 12, scope: !96)
!104 = !DILocation(line: 15, column: 7, scope: !96)
!105 = !DILocation(line: 15, column: 9, scope: !96)
!106 = !DILocation(line: 15, column: 15, scope: !96)
!107 = !DILocation(line: 16, column: 5, scope: !96)
!108 = !DILocation(line: 14, column: 29, scope: !91)
!109 = !DILocation(line: 14, column: 5, scope: !91)
!110 = !DILocation(line: 17, column: 3, scope: !85)
!111 = !DILocation(line: 13, column: 27, scope: !79)
!112 = !DILocation(line: 13, column: 3, scope: !79)
!113 = !DILocation(line: 18, column: 1, scope: !10)
!114 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !11, file: !1, line: 20, type: !7)
!115 = !DILocation(line: 20, column: 21, scope: !11)
!116 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !11, file: !1, line: 20, type: !7)
!117 = !DILocation(line: 20, column: 30, scope: !11)
!118 = !DILocation(line: 21, column: 7, scope: !11)
!119 = !DILocation(line: 21, column: 10, scope: !11)
!120 = !DILocation(line: 21, column: 3, scope: !11)
!121 = !DILocation(line: 22, column: 7, scope: !11)
!122 = !DILocation(line: 22, column: 10, scope: !11)
!123 = !DILocation(line: 22, column: 12, scope: !11)
!124 = !DILocation(line: 22, column: 3, scope: !11)
!125 = !DILocation(line: 23, column: 8, scope: !11)
!126 = !DILocation(line: 23, column: 11, scope: !11)
!127 = !DILocation(line: 23, column: 3, scope: !11)
!128 = !DILocation(line: 24, column: 1, scope: !11)
