; ModuleID = 'result.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind uwtable
define void @foo(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !17, metadata !18), !dbg !19, !InstID !20
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !21, metadata !18), !dbg !22, !InstID !23
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !24, metadata !18), !dbg !25, !InstID !26
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !27, metadata !18), !dbg !29, !InstID !30
  br label %for.cond, !dbg !31, !InstID !32, !Number\20of\20Instructions !33

for.cond:                                         ; preds = %for.inc.14, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc15, %for.inc.14 ], !InstID !34
  %cmp = icmp slt i32 %i.0, %n, !dbg !35, !InstID !37
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !38, !InstID !39

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !40, metadata !18), !dbg !43, !InstID !44
  br label %for.cond.1, !dbg !45, !InstID !46

for.cond.1:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !InstID !47
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !48, !InstID !50
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !51, !InstID !52

for.body.3:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !53, !InstID !55
  %idxprom4 = sext i32 %i.0 to i64, !dbg !53, !InstID !56
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom4, !dbg !53, !InstID !57
  %tmp = load i32*, i32** %arrayidx, align 8, !dbg !53, !Memory\20Dependence !58, !InstID !59
  %arrayidx5 = getelementptr inbounds i32, i32* %tmp, i64 %idxprom, !dbg !53, !InstID !60
  %tmp1 = load i32, i32* %arrayidx5, align 4, !dbg !53, !Memory\20Dependence !61, !InstID !62
  %idxprom6 = sext i32 %j.0 to i64, !dbg !63, !InstID !64
  %idxprom7 = sext i32 %i.0 to i64, !dbg !63, !InstID !65
  %arrayidx8 = getelementptr inbounds i32*, i32** %a, i64 %idxprom7, !dbg !63, !InstID !66
  %tmp2 = load i32*, i32** %arrayidx8, align 8, !dbg !63, !Memory\20Dependence !67, !InstID !68
  %arrayidx9 = getelementptr inbounds i32, i32* %tmp2, i64 %idxprom6, !dbg !63, !InstID !69
  %tmp3 = load i32, i32* %arrayidx9, align 4, !dbg !63, !Memory\20Dependence !70, !InstID !71
  %add = add nsw i32 %tmp1, %tmp3, !dbg !72, !InstID !73
  %idxprom10 = sext i32 %j.0 to i64, !dbg !74, !InstID !75
  %idxprom11 = sext i32 %i.0 to i64, !dbg !74, !InstID !76
  %arrayidx12 = getelementptr inbounds i32*, i32** %a, i64 %idxprom11, !dbg !74, !InstID !77
  %tmp4 = load i32*, i32** %arrayidx12, align 8, !dbg !74, !Memory\20Dependence !78, !InstID !79
  %arrayidx13 = getelementptr inbounds i32, i32* %tmp4, i64 %idxprom10, !dbg !74, !InstID !80
  store i32 %add, i32* %arrayidx13, align 4, !dbg !81, !Memory\20Dependence !82, !InstID !83
  br label %for.inc, !dbg !84, !InstID !85

for.inc:                                          ; preds = %for.body.3
  %inc = add nsw i32 %j.0, 1, !dbg !86, !InstID !87
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !40, metadata !18), !dbg !43, !InstID !88
  br label %for.cond.1, !dbg !89, !InstID !90

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.14, !dbg !91, !InstID !92

for.inc.14:                                       ; preds = %for.end
  %inc15 = add nsw i32 %i.0, 1, !dbg !93, !InstID !94
  call void @llvm.dbg.value(metadata i32 %inc15, i64 0, metadata !27, metadata !18), !dbg !29, !InstID !95
  br label %for.cond, !dbg !96, !InstID !97

for.end.16:                                       ; preds = %for.cond
  ret void, !dbg !98, !InstID !99
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define void @foo2(i32** %a, i32** %b, i32 %n) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !100, metadata !18), !dbg !101, !InstID !102
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !103, metadata !18), !dbg !104, !InstID !105
  call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !106, metadata !18), !dbg !107, !InstID !108
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !109, metadata !18), !dbg !111, !InstID !112
  br label %for.cond, !dbg !113, !InstID !114, !Number\20of\20Instructions !33

for.cond:                                         ; preds = %for.inc.14, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc15, %for.inc.14 ], !InstID !115
  %cmp = icmp slt i32 %i.0, %n, !dbg !116, !InstID !118
  br i1 %cmp, label %for.body, label %for.end.16, !dbg !119, !InstID !120

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !121, metadata !18), !dbg !124, !InstID !125
  br label %for.cond.1, !dbg !126, !InstID !127

for.cond.1:                                       ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !InstID !128
  %cmp2 = icmp slt i32 %j.0, %n, !dbg !129, !InstID !131
  br i1 %cmp2, label %for.body.3, label %for.end, !dbg !132, !InstID !133

for.body.3:                                       ; preds = %for.cond.1
  %idxprom = sext i32 %j.0 to i64, !dbg !134, !InstID !136
  %idxprom4 = sext i32 %i.0 to i64, !dbg !134, !InstID !137
  %arrayidx = getelementptr inbounds i32*, i32** %b, i64 %idxprom4, !dbg !134, !InstID !138
  %tmp = load i32*, i32** %arrayidx, align 8, !dbg !134, !Memory\20Dependence !58, !InstID !139
  %arrayidx5 = getelementptr inbounds i32, i32* %tmp, i64 %idxprom, !dbg !134, !InstID !140
  %tmp1 = load i32, i32* %arrayidx5, align 4, !dbg !134, !Memory\20Dependence !61, !InstID !141
  %idxprom6 = sext i32 %j.0 to i64, !dbg !142, !InstID !143
  %idxprom7 = sext i32 %i.0 to i64, !dbg !142, !InstID !144
  %arrayidx8 = getelementptr inbounds i32*, i32** %a, i64 %idxprom7, !dbg !142, !InstID !145
  %tmp2 = load i32*, i32** %arrayidx8, align 8, !dbg !142, !Memory\20Dependence !67, !InstID !146
  %arrayidx9 = getelementptr inbounds i32, i32* %tmp2, i64 %idxprom6, !dbg !142, !InstID !147
  %tmp3 = load i32, i32* %arrayidx9, align 4, !dbg !142, !Memory\20Dependence !70, !InstID !148
  %add = add nsw i32 %tmp1, %tmp3, !dbg !149, !InstID !150
  %idxprom10 = sext i32 %j.0 to i64, !dbg !151, !InstID !152
  %idxprom11 = sext i32 %i.0 to i64, !dbg !151, !InstID !153
  %arrayidx12 = getelementptr inbounds i32*, i32** %a, i64 %idxprom11, !dbg !151, !InstID !154
  %tmp4 = load i32*, i32** %arrayidx12, align 8, !dbg !151, !Memory\20Dependence !78, !InstID !155
  %arrayidx13 = getelementptr inbounds i32, i32* %tmp4, i64 %idxprom10, !dbg !151, !InstID !156
  store i32 %add, i32* %arrayidx13, align 4, !dbg !157, !Memory\20Dependence !82, !InstID !158
  br label %for.inc, !dbg !159, !InstID !160

for.inc:                                          ; preds = %for.body.3
  %inc = add nsw i32 %j.0, 1, !dbg !161, !InstID !162
  call void @llvm.dbg.value(metadata i32 %inc, i64 0, metadata !121, metadata !18), !dbg !124, !InstID !163
  br label %for.cond.1, !dbg !164, !InstID !165

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.14, !dbg !166, !InstID !167

for.inc.14:                                       ; preds = %for.end
  %inc15 = add nsw i32 %i.0, 1, !dbg !168, !InstID !169
  call void @llvm.dbg.value(metadata i32 %inc15, i64 0, metadata !109, metadata !18), !dbg !111, !InstID !170
  br label %for.cond, !dbg !171, !InstID !172

for.end.16:                                       ; preds = %for.cond
  ret void, !dbg !173, !InstID !174
}

; Function Attrs: nounwind uwtable
define void @call_foo(i32** %a, i32** %b) #0 {
entry:
  call void @llvm.dbg.value(metadata i32** %a, i64 0, metadata !175, metadata !18), !dbg !176, !InstID !177
  call void @llvm.dbg.value(metadata i32** %b, i64 0, metadata !178, metadata !18), !dbg !179, !InstID !180
  call void @foo(i32** %a, i32** %b, i32 100), !dbg !181, !Memory\20Dependence !182, !InstID !183
  %add.ptr = getelementptr inbounds i32*, i32** %a, i64 50, !dbg !184, !InstID !185
  call void @foo(i32** %a, i32** %add.ptr, i32 100), !dbg !186, !Memory\20Dependence !187, !InstID !188
  call void @foo2(i32** %a, i32** %b, i32 100), !dbg !189, !Memory\20Dependence !190, !InstID !191
  ret void, !dbg !192, !InstID !193, !Number\20of\20Instructions !194
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15}
!llvm.ident = !{!16}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "/home/gleison/Desktop/Projetos/Examples/test3.c", directory: "/home/gleison/Desktop/Projetos/SymbolicPtrRangeAnalysis/scripts")
!2 = !{}
!3 = !{!4, !10, !11}
!4 = !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !5, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: false, function: void (i32**, i32**, i32)* @foo, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{null, !7, !7, !9}
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64, align: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!10 = !DISubprogram(name: "foo2", scope: !1, file: !1, line: 12, type: !5, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, function: void (i32**, i32**, i32)* @foo2, variables: !2)
!11 = !DISubprogram(name: "call_foo", scope: !1, file: !1, line: 20, type: !12, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, function: void (i32**, i32**)* @call_foo, variables: !2)
!12 = !DISubroutineType(types: !13)
!13 = !{null, !7, !7}
!14 = !{i32 2, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!17 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !4, file: !1, line: 4, type: !7)
!18 = !DIExpression()
!19 = !DILocation(line: 4, column: 16, scope: !4)
!20 = !{!" {< FUNCTION foo >< ID 1 >< LINE 4 >< COLUMN 16 >} "}
!21 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !4, file: !1, line: 4, type: !7)
!22 = !DILocation(line: 4, column: 25, scope: !4)
!23 = !{!" {< FUNCTION foo >< ID 2 >< LINE 4 >< COLUMN 25 >} "}
!24 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !4, file: !1, line: 4, type: !9)
!25 = !DILocation(line: 4, column: 32, scope: !4)
!26 = !{!" {< FUNCTION foo >< ID 3 >< LINE 4 >< COLUMN 32 >} "}
!27 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !28, file: !1, line: 5, type: !9)
!28 = distinct !DILexicalBlock(scope: !4, file: !1, line: 5, column: 3)
!29 = !DILocation(line: 5, column: 12, scope: !28)
!30 = !{!" {< FUNCTION foo >< ID 4 >< LINE 5 >< COLUMN 12 >} "}
!31 = !DILocation(line: 5, column: 8, scope: !28)
!32 = !{!" {< FUNCTION foo >< ID 5 >< LINE 5 >< COLUMN 8 >} "}
!33 = !{!" { NINST = 41} "}
!34 = !{!" {< FUNCTION foo >< ID 6 >< LINE -1 >< COLUMN -1 >} "}
!35 = !DILocation(line: 5, column: 21, scope: !36)
!36 = distinct !DILexicalBlock(scope: !28, file: !1, line: 5, column: 3)
!37 = !{!" {< FUNCTION foo >< ID 7 >< LINE 5 >< COLUMN 21 >} "}
!38 = !DILocation(line: 5, column: 3, scope: !28)
!39 = !{!" {< FUNCTION foo >< ID 8 >< LINE 5 >< COLUMN 3 >} "}
!40 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !41, file: !1, line: 6, type: !9)
!41 = distinct !DILexicalBlock(scope: !42, file: !1, line: 6, column: 5)
!42 = distinct !DILexicalBlock(scope: !36, file: !1, line: 5, column: 31)
!43 = !DILocation(line: 6, column: 14, scope: !41)
!44 = !{!" {< FUNCTION foo >< ID 9 >< LINE 6 >< COLUMN 14 >} "}
!45 = !DILocation(line: 6, column: 10, scope: !41)
!46 = !{!" {< FUNCTION foo >< ID 10 >< LINE 6 >< COLUMN 10 >} "}
!47 = !{!" {< FUNCTION foo >< ID 11 >< LINE -1 >< COLUMN -1 >} "}
!48 = !DILocation(line: 6, column: 23, scope: !49)
!49 = distinct !DILexicalBlock(scope: !41, file: !1, line: 6, column: 5)
!50 = !{!" {< FUNCTION foo >< ID 12 >< LINE 6 >< COLUMN 23 >} "}
!51 = !DILocation(line: 6, column: 5, scope: !41)
!52 = !{!" {< FUNCTION foo >< ID 13 >< LINE 6 >< COLUMN 5 >} "}
!53 = !DILocation(line: 7, column: 17, scope: !54)
!54 = distinct !DILexicalBlock(scope: !49, file: !1, line: 6, column: 33)
!55 = !{!" {< FUNCTION foo >< ID 14 >< LINE 7 >< COLUMN 17 >} "}
!56 = !{!" {< FUNCTION foo >< ID 15 >< LINE 7 >< COLUMN 17 >} "}
!57 = !{!" {< FUNCTION foo >< ID 16 >< LINE 7 >< COLUMN 17 >} "}
!58 = !{!" {1 depends of 16} ", !" {1 depends of 14} ", !" {1 depends of 9} ", !" {1 depends of 7} ", !" {1 depends of 3} ", !" {1 depends of 1} ", !" {1 depends of 1} "}
!59 = !{!" {< FUNCTION foo >< ID 17 >< LINE 7 >< COLUMN 17 >} "}
!60 = !{!" {< FUNCTION foo >< ID 18 >< LINE 7 >< COLUMN 17 >} "}
!61 = !{!" {2 depends of 39} ", !" {2 depends of 37} ", !" {2 depends of 32} ", !" {2 depends of 30} ", !" {26 depends of 2} ", !" {2 depends of 26} ", !" {3 depends of 1} "}
!62 = !{!" {< FUNCTION foo >< ID 19 >< LINE 7 >< COLUMN 17 >} "}
!63 = !DILocation(line: 7, column: 27, scope: !54)
!64 = !{!" {< FUNCTION foo >< ID 20 >< LINE 7 >< COLUMN 27 >} "}
!65 = !{!" {< FUNCTION foo >< ID 21 >< LINE 7 >< COLUMN 27 >} "}
!66 = !{!" {< FUNCTION foo >< ID 22 >< LINE 7 >< COLUMN 27 >} "}
!67 = !{!" {3 depends of 58} ", !" {3 depends of 56} ", !" {3 depends of 51} ", !" {49 depends of 3} ", !" {3 depends of 49} ", !" {30 depends of 2} ", !" {7 depends of 1} "}
!68 = !{!" {< FUNCTION foo >< ID 23 >< LINE 7 >< COLUMN 27 >} "}
!69 = !{!" {< FUNCTION foo >< ID 24 >< LINE 7 >< COLUMN 27 >} "}
!70 = !{!" {4 depends of 75} ", !" {4 depends of 73} ", !" {68 depends of 4} ", !" {4 depends of 68} ", !" {51 depends of 3} ", !" {32 depends of 2} ", !" {9 depends of 1} "}
!71 = !{!" {< FUNCTION foo >< ID 25 >< LINE 7 >< COLUMN 27 >} "}
!72 = !DILocation(line: 7, column: 25, scope: !54)
!73 = !{!" {< FUNCTION foo >< ID 26 >< LINE 7 >< COLUMN 25 >} "}
!74 = !DILocation(line: 7, column: 7, scope: !54)
!75 = !{!" {< FUNCTION foo >< ID 27 >< LINE 7 >< COLUMN 7 >} "}
!76 = !{!" {< FUNCTION foo >< ID 28 >< LINE 7 >< COLUMN 7 >} "}
!77 = !{!" {< FUNCTION foo >< ID 29 >< LINE 7 >< COLUMN 7 >} "}
!78 = !{!" {5 depends of 87} ", !" {85 depends of 5} ", !" {5 depends of 85} ", !" {73 depends of 4} ", !" {56 depends of 3} ", !" {37 depends of 2} ", !" {14 depends of 1} "}
!79 = !{!" {< FUNCTION foo >< ID 30 >< LINE 7 >< COLUMN 7 >} "}
!80 = !{!" {< FUNCTION foo >< ID 31 >< LINE 7 >< COLUMN 7 >} "}
!81 = !DILocation(line: 7, column: 15, scope: !54)
!82 = !{!" {97 depends of 6} ", !" {6 depends of 97} ", !" {87 depends of 5} ", !" {75 depends of 4} ", !" {58 depends of 3} ", !" {39 depends of 2} ", !" {16 depends of 1} "}
!83 = !{!" {< FUNCTION foo >< ID 32 >< LINE 7 >< COLUMN 15 >} "}
!84 = !DILocation(line: 8, column: 5, scope: !54)
!85 = !{!" {< FUNCTION foo >< ID 33 >< LINE 8 >< COLUMN 5 >} "}
!86 = !DILocation(line: 6, column: 29, scope: !49)
!87 = !{!" {< FUNCTION foo >< ID 34 >< LINE 6 >< COLUMN 29 >} "}
!88 = !{!" {< FUNCTION foo >< ID 35 >< LINE 6 >< COLUMN 14 >} "}
!89 = !DILocation(line: 6, column: 5, scope: !49)
!90 = !{!" {< FUNCTION foo >< ID 36 >< LINE 6 >< COLUMN 5 >} "}
!91 = !DILocation(line: 9, column: 3, scope: !42)
!92 = !{!" {< FUNCTION foo >< ID 37 >< LINE 9 >< COLUMN 3 >} "}
!93 = !DILocation(line: 5, column: 27, scope: !36)
!94 = !{!" {< FUNCTION foo >< ID 38 >< LINE 5 >< COLUMN 27 >} "}
!95 = !{!" {< FUNCTION foo >< ID 39 >< LINE 5 >< COLUMN 12 >} "}
!96 = !DILocation(line: 5, column: 3, scope: !36)
!97 = !{!" {< FUNCTION foo >< ID 40 >< LINE 5 >< COLUMN 3 >} "}
!98 = !DILocation(line: 10, column: 1, scope: !4)
!99 = !{!" {< FUNCTION foo >< ID 41 >< LINE 10 >< COLUMN 1 >} "}
!100 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !10, file: !1, line: 12, type: !7)
!101 = !DILocation(line: 12, column: 17, scope: !10)
!102 = !{!" {< FUNCTION foo2 >< ID 1 >< LINE 12 >< COLUMN 17 >} "}
!103 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !10, file: !1, line: 12, type: !7)
!104 = !DILocation(line: 12, column: 26, scope: !10)
!105 = !{!" {< FUNCTION foo2 >< ID 2 >< LINE 12 >< COLUMN 26 >} "}
!106 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !10, file: !1, line: 12, type: !9)
!107 = !DILocation(line: 12, column: 33, scope: !10)
!108 = !{!" {< FUNCTION foo2 >< ID 3 >< LINE 12 >< COLUMN 33 >} "}
!109 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !110, file: !1, line: 13, type: !9)
!110 = distinct !DILexicalBlock(scope: !10, file: !1, line: 13, column: 3)
!111 = !DILocation(line: 13, column: 12, scope: !110)
!112 = !{!" {< FUNCTION foo2 >< ID 4 >< LINE 13 >< COLUMN 12 >} "}
!113 = !DILocation(line: 13, column: 8, scope: !110)
!114 = !{!" {< FUNCTION foo2 >< ID 5 >< LINE 13 >< COLUMN 8 >} "}
!115 = !{!" {< FUNCTION foo2 >< ID 6 >< LINE -1 >< COLUMN -1 >} "}
!116 = !DILocation(line: 13, column: 21, scope: !117)
!117 = distinct !DILexicalBlock(scope: !110, file: !1, line: 13, column: 3)
!118 = !{!" {< FUNCTION foo2 >< ID 7 >< LINE 13 >< COLUMN 21 >} "}
!119 = !DILocation(line: 13, column: 3, scope: !110)
!120 = !{!" {< FUNCTION foo2 >< ID 8 >< LINE 13 >< COLUMN 3 >} "}
!121 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !122, file: !1, line: 14, type: !9)
!122 = distinct !DILexicalBlock(scope: !123, file: !1, line: 14, column: 5)
!123 = distinct !DILexicalBlock(scope: !117, file: !1, line: 13, column: 31)
!124 = !DILocation(line: 14, column: 14, scope: !122)
!125 = !{!" {< FUNCTION foo2 >< ID 9 >< LINE 14 >< COLUMN 14 >} "}
!126 = !DILocation(line: 14, column: 10, scope: !122)
!127 = !{!" {< FUNCTION foo2 >< ID 10 >< LINE 14 >< COLUMN 10 >} "}
!128 = !{!" {< FUNCTION foo2 >< ID 11 >< LINE -1 >< COLUMN -1 >} "}
!129 = !DILocation(line: 14, column: 23, scope: !130)
!130 = distinct !DILexicalBlock(scope: !122, file: !1, line: 14, column: 5)
!131 = !{!" {< FUNCTION foo2 >< ID 12 >< LINE 14 >< COLUMN 23 >} "}
!132 = !DILocation(line: 14, column: 5, scope: !122)
!133 = !{!" {< FUNCTION foo2 >< ID 13 >< LINE 14 >< COLUMN 5 >} "}
!134 = !DILocation(line: 15, column: 17, scope: !135)
!135 = distinct !DILexicalBlock(scope: !130, file: !1, line: 14, column: 33)
!136 = !{!" {< FUNCTION foo2 >< ID 14 >< LINE 15 >< COLUMN 17 >} "}
!137 = !{!" {< FUNCTION foo2 >< ID 15 >< LINE 15 >< COLUMN 17 >} "}
!138 = !{!" {< FUNCTION foo2 >< ID 16 >< LINE 15 >< COLUMN 17 >} "}
!139 = !{!" {< FUNCTION foo2 >< ID 17 >< LINE 15 >< COLUMN 17 >} "}
!140 = !{!" {< FUNCTION foo2 >< ID 18 >< LINE 15 >< COLUMN 17 >} "}
!141 = !{!" {< FUNCTION foo2 >< ID 19 >< LINE 15 >< COLUMN 17 >} "}
!142 = !DILocation(line: 15, column: 27, scope: !135)
!143 = !{!" {< FUNCTION foo2 >< ID 20 >< LINE 15 >< COLUMN 27 >} "}
!144 = !{!" {< FUNCTION foo2 >< ID 21 >< LINE 15 >< COLUMN 27 >} "}
!145 = !{!" {< FUNCTION foo2 >< ID 22 >< LINE 15 >< COLUMN 27 >} "}
!146 = !{!" {< FUNCTION foo2 >< ID 23 >< LINE 15 >< COLUMN 27 >} "}
!147 = !{!" {< FUNCTION foo2 >< ID 24 >< LINE 15 >< COLUMN 27 >} "}
!148 = !{!" {< FUNCTION foo2 >< ID 25 >< LINE 15 >< COLUMN 27 >} "}
!149 = !DILocation(line: 15, column: 25, scope: !135)
!150 = !{!" {< FUNCTION foo2 >< ID 26 >< LINE 15 >< COLUMN 25 >} "}
!151 = !DILocation(line: 15, column: 7, scope: !135)
!152 = !{!" {< FUNCTION foo2 >< ID 27 >< LINE 15 >< COLUMN 7 >} "}
!153 = !{!" {< FUNCTION foo2 >< ID 28 >< LINE 15 >< COLUMN 7 >} "}
!154 = !{!" {< FUNCTION foo2 >< ID 29 >< LINE 15 >< COLUMN 7 >} "}
!155 = !{!" {< FUNCTION foo2 >< ID 30 >< LINE 15 >< COLUMN 7 >} "}
!156 = !{!" {< FUNCTION foo2 >< ID 31 >< LINE 15 >< COLUMN 7 >} "}
!157 = !DILocation(line: 15, column: 15, scope: !135)
!158 = !{!" {< FUNCTION foo2 >< ID 32 >< LINE 15 >< COLUMN 15 >} "}
!159 = !DILocation(line: 16, column: 5, scope: !135)
!160 = !{!" {< FUNCTION foo2 >< ID 33 >< LINE 16 >< COLUMN 5 >} "}
!161 = !DILocation(line: 14, column: 29, scope: !130)
!162 = !{!" {< FUNCTION foo2 >< ID 34 >< LINE 14 >< COLUMN 29 >} "}
!163 = !{!" {< FUNCTION foo2 >< ID 35 >< LINE 14 >< COLUMN 14 >} "}
!164 = !DILocation(line: 14, column: 5, scope: !130)
!165 = !{!" {< FUNCTION foo2 >< ID 36 >< LINE 14 >< COLUMN 5 >} "}
!166 = !DILocation(line: 17, column: 3, scope: !123)
!167 = !{!" {< FUNCTION foo2 >< ID 37 >< LINE 17 >< COLUMN 3 >} "}
!168 = !DILocation(line: 13, column: 27, scope: !117)
!169 = !{!" {< FUNCTION foo2 >< ID 38 >< LINE 13 >< COLUMN 27 >} "}
!170 = !{!" {< FUNCTION foo2 >< ID 39 >< LINE 13 >< COLUMN 12 >} "}
!171 = !DILocation(line: 13, column: 3, scope: !117)
!172 = !{!" {< FUNCTION foo2 >< ID 40 >< LINE 13 >< COLUMN 3 >} "}
!173 = !DILocation(line: 18, column: 1, scope: !10)
!174 = !{!" {< FUNCTION foo2 >< ID 41 >< LINE 18 >< COLUMN 1 >} "}
!175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !11, file: !1, line: 20, type: !7)
!176 = !DILocation(line: 20, column: 21, scope: !11)
!177 = !{!" {< FUNCTION call_foo >< ID 1 >< LINE 20 >< COLUMN 21 >} "}
!178 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !11, file: !1, line: 20, type: !7)
!179 = !DILocation(line: 20, column: 30, scope: !11)
!180 = !{!" {< FUNCTION call_foo >< ID 2 >< LINE 20 >< COLUMN 30 >} "}
!181 = !DILocation(line: 21, column: 3, scope: !11)
!182 = !{!" {1 depends of 4} ", !" {1 depends of 3} ", !" {1 depends of 1} ", !" {1 depends of 1} "}
!183 = !{!" {< FUNCTION call_foo >< ID 3 >< LINE 21 >< COLUMN 3 >} "}
!184 = !DILocation(line: 22, column: 12, scope: !11)
!185 = !{!" {< FUNCTION call_foo >< ID 4 >< LINE 22 >< COLUMN 12 >} "}
!186 = !DILocation(line: 22, column: 3, scope: !11)
!187 = !{!" {2 depends of 7} ", !" {6 depends of 2} ", !" {2 depends of 6} ", !" {3 depends of 1} "}
!188 = !{!" {< FUNCTION call_foo >< ID 5 >< LINE 22 >< COLUMN 3 >} "}
!189 = !DILocation(line: 23, column: 3, scope: !11)
!190 = !{!" {9 depends of 3} ", !" {3 depends of 9} ", !" {7 depends of 2} ", !" {4 depends of 1} "}
!191 = !{!" {< FUNCTION call_foo >< ID 6 >< LINE 23 >< COLUMN 3 >} "}
!192 = !DILocation(line: 24, column: 1, scope: !11)
!193 = !{!" {< FUNCTION call_foo >< ID 7 >< LINE 24 >< COLUMN 1 >} "}
!194 = !{!" { NINST = 7} "}
